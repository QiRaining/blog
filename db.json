{"Asset":[{"source":"source/favicon.ico","mtime":1377913082000,"_id":"6ta3patpa9kft1do"},{"source":"themes/bootstrap/source/css/bootstrap-responsive.css","mtime":1377913082000,"_id":"85im4r6c16f698dv"},{"source":"themes/bootstrap/source/css/bootstrap-responsive.min.css","mtime":1377913082000,"_id":"gzlalxj8pf4jvbh9"},{"source":"themes/bootstrap/source/css/bootstrap.css","mtime":1377913082000,"_id":"qhfzdxvwvpway2b3"},{"source":"themes/bootstrap/source/css/bootstrap.min.css","mtime":1377913082000,"_id":"d7b5w6tipk5vvxqb"},{"source":"themes/bootstrap/source/css/hexobootstrapcss.css","mtime":1377913082000,"_id":"lsozvyoxovgeptti"},{"source":"themes/bootstrap/source/css/hf.css","mtime":1377916538000,"_id":"q42dsbj1t6ximn9u"},{"source":"themes/bootstrap/source/css/tab.css","mtime":1377913082000,"_id":"uex4fa905qk5e2g0"},{"source":"themes/bootstrap/source/fancybox/blank.gif","mtime":1377913082000,"_id":"su562unoktqqzfbx"},{"source":"themes/bootstrap/source/fancybox/fancybox_loading.gif","mtime":1377913082000,"_id":"bxromg9nvn378mcu"},{"source":"themes/bootstrap/source/fancybox/fancybox_overlay.png","mtime":1377913082000,"_id":"ulw0oansjfudsv4j"},{"source":"themes/bootstrap/source/fancybox/fancybox_sprite.png","mtime":1377913082000,"_id":"bpnr3jv3707ay771"},{"source":"themes/bootstrap/source/fancybox/jquery.fancybox.css","mtime":1377913082000,"_id":"wxgnrsqucp3bgjye"},{"source":"themes/bootstrap/source/fancybox/jquery.fancybox.pack.js","mtime":1377913576000,"_id":"chkvidzoltsqpylh"},{"source":"themes/bootstrap/source/js/bootstrap.js","mtime":1377913082000,"_id":"gea10i39z42azxyp"},{"source":"themes/bootstrap/source/js/bootstrap.min.js","mtime":1377913082000,"_id":"cq8yooq18aex3cvw"},{"source":"themes/bootstrap/source/js/jquery-1.8.3.min.js","mtime":1377913082000,"_id":"zfqhrh2sdlto1nn7"},{"source":"themes/bootstrap/source/js/jquery.easing.min.js","mtime":1377913082000,"_id":"xufkrl36t9mqt2ia"},{"source":"themes/bootstrap/source/js/jquery.imagesloaded.min.js","mtime":1377913082000,"_id":"sb5w7azuj2olasn9"},{"source":"themes/bootstrap/source/js/jquery.js","mtime":1377913082000,"_id":"zrxec0xxt7nca30e"},{"source":"themes/bootstrap/source/js/jquery.menuindex.js","mtime":1377913082000,"_id":"2p8n6r494xlfn9rm"},{"source":"themes/bootstrap/source/js/jquery.pagination.js","mtime":1377913082000,"_id":"hymb76zqkui2bc6u"},{"source":"themes/bootstrap/source/js/jquery.scrollUp.js","mtime":1377913082000,"_id":"az837inz77qdbidc"},{"source":"themes/bootstrap/source/js/jquery.scrollUp.min.js","mtime":1377913082000,"_id":"mno4wjf3zfpktqrp"},{"source":"themes/bootstrap/source/img/glyphicons-halflings-white.png","mtime":1377913082000,"_id":"f7q1die0597ch0jl"},{"source":"themes/bootstrap/source/img/glyphicons-halflings.png","mtime":1377913082000,"_id":"cfpfgdtl6qcek2is"},{"source":"themes/bootstrap/source/img/hufeng825.jpg","mtime":1377913082000,"_id":"gzqu7idjtbl8pjnf"},{"source":"themes/bootstrap/source/img/patterns/mooning.png","mtime":1377913082000,"_id":"rmxn9i947pn9tyn9"},{"source":"themes/bootstrap/source/img/patterns/white_wall_hash.png","mtime":1377914544000,"_id":"ibfyefa6f2b7wk5j"}],"Cache":[{"content":"title: ios 笔记之 内购\ndate: 2013-08-21 09:18:13\ntags: [技术]\ncategories: ios\n---\n> 昨晚同事拿了一个app 发现其app 内部页面打开了appstore  并没有唤起手机自带的appstore， 刚开始以为是用webview 加载的\n<!-- more --> ，可是自己些了一个demo 发现并不是那样一回事 用webview 加载appstore 地址 会被js 自动吊起本地的appstore，\n下面是我的发给同事的邮件 直接贴下来\n\n我们都绕了弯路 一直以为是用webview 加载的。 我下班做了测试 发现用webview 加载appstore的地址 ，ios 会根据User-Agent 自动判断 唤起本地的app store，其效果跟用[[UIApplicationsharedApplication] openURL:[NSURL URLWithString:@\"\"]];是一样的。\n\n后来我尝试改写User-Agent  发现打开的页面是电脑打开的页面一样的 并不是我们通过手机 打开app store 看到的页面。\n\n后来我看苹果的文档 发现 他们提供了一个类SKStoreProductViewController专门来干这个事情的\n\n[https://developer.apple.com/library/ios/documentation/StoreKit/Reference/SKITunesProductViewController_Ref/Introduction/Introduction.html](https://developer.apple.com/library/ios/documentation/StoreKit/Reference/SKITunesProductViewController_Ref/Introduction/Introduction.html)\n\n\n实现效果如下图\n\n{% img center http://ww4.sinaimg.cn/mw690/a43af4ffjw1e7u10xs9nwj20m015c0x9.jpg 250 600  %}\n\n##下面是关键代码\n\n```\n需要引入的\n#import <StoreKit/StoreKit.h>\ndelegate 为SKStoreProductViewControllerDelegate\n\n\n调用方式\n    [self openAppWithIdentifier:@\"592043421\"];\n\n\n\n#pragma mark - SKStoreProductViewControllerDelegate\n- (void)productViewControllerDidFinish:(SKStoreProductViewController *)viewController {\n    [viewController dismissViewControllerAnimated:YES completion:^{\n    }];\n}\n\n\n\n\n\n\n- (void)openAppWithIdentifier:(NSString *)appId {\n    SKStoreProductViewController *storeProductVC = [[SKStoreProductViewController alloc] init];\n    storeProductVC.delegate = self;\n    \n    NSDictionary *dict = [NSDictionary dictionaryWithObject:appId forKey:SKStoreProductParameterITunesItemIdentifier];\n    [storeProductVC loadProductWithParameters:dict completionBlock:^(BOOL result, NSError *error) {\n        if (result) {\n            [self presentViewController:storeProductVC animated:YES completion:nil];\n        }\n    }];\n}\n\n```\n","mtime":1377913082000,"source":"_posts/appstore.md","_id":"4qx0cl1uccbb6qv0"},{"content":"title: hexo教程1 如何安装hexo\ndate: 2013-08-08 14:21:33\ntags: [技术]\ncategories: [hexo]\n---\n<!--more-->\n##前言\n>很早之前就想自己搭建一个博客，但是无奈已没有时间 而没有银子购买服务器，把家里的mac 当做服务器搭建wordpress但是不能保证速度和访问时间。偶然间发现了octopress,于是兴冲冲的折腾起来，最后搭建成功了，废了很大的经历，最主要的原因是还是网络原因，octopress 安装需要下载大量的安装依赖非常繁琐，到处是坑。后来偶然间发现了hexo，发现要比octopress 好用的太多了。于是果断废弃octopress 转头hexo\n\n***\n\n##概念理解\nhexo 是基于node.js 的 和rails 差不多。再次使用前 需要安装两个插件\n\n *   nvm （版本控制）\n     nodejs version manager,可以把它理解为 rails里面的rvm  \n *   npm （包管理机制 ）\n \t nodejs package manager,可以把它理解为 rails 里面的bundle \n     \n- - -\n###安装步骤(mac)\n>只针对于mac 其他的请到官网查看相应平台的安装方法http://zespia.tw/hexo \n\n***\n#### npm\n***\n打开终端 执行一下命令\n\n```\ngit clone git://github.com/creationix/nvm.git ~/nvm\n```\n安装完毕后，在~/.bash_profile或~/.bashrc加入以下内容\n\n```\n. ~/nvm/nvm.sh`\n```\n执行\n\n```\nsource .bash_profile //或者 source .bashrc\n```\n之后即可使用 nvm 来安装 Node.js\n\n```\n   nvm install v0.8.14\n   nvm use v0.8.14\n   nvm alias default v0.8.14 \n```\n***\n#### hexo\n安装\n\n```\nnpm install -g hexo\n```\n更新\n\n```\nnpm update -g \n```\n***\n\n###设定\n\n编辑 _config.yml\n\n下面贴出我的配置 大家自行根据各自的配置进行相应修改\n\n\n\t// Site\n\ttitle: 阿峰的技术窝窝\n\tsubtitle: 专注于移动互联网\n\tdescription: C/C++/Linux/嵌入式/IOS/WEB/\n\tauthor: Jason Hu\n\temail: hufeng@hufengvip.cn\n\tlanguage: zh-CN\n\n\t// URL\n\t// If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\n\turl: http://hufeng825.github.com\n\troot: /\n\tpermalink: :year/:month/:day/:title/\n\ttag_dir: tags\n\tarchive_dir: archives\n\tcategory_dir: categories\n\tcode_dir: downloads/code\n\n\t// Writing\n\tnew_post_name: :title.md # File name of new posts\n\tdefault_layout: post\n\tauto_spacing: false # Add spaces between asian characters and western characters\n\ttitlecase: false # Transform title into titlecase\n\tmax_open_file: 100\n\tfilename_case: 0\n\thighlight:\n\t  enable: true\n\t  line_number: true\n\t  tab_replace:\n\n\t// Category & Tag\n\tdefault_category: IOS\n\tcategory_map:\n\ttag_map:\n\n\t// Archives\n\t// 2: Enable pagination\n\t// 1: Disable pagination\n\t// 0: Fully Disable\n\tarchive: 2\n\tcategory: 2\n\ttag: 2\n\n\t// Server\n\t// Hexo uses Connect as a server\n\t// You can customize the logger format as defined in\n\t// http://www.senchalabs.org/connect/logger.html\n\tport: 4000\n\tlogger: false\n\tlogger_format:\n\n\t// Date / Time format\n\t// Hexo uses Moment.js to parse and display date\n\t// You can customize the date format as defined in\n\t// http://momentjs.com/docs/#/displaying/format/\n\tdate_format: YYYY MMM D\n\ttime_format: H:mm:ss\n\n\t// Pagination\n\t// Set per_page to 0 to disable pagination\n\tper_page: 10\n\tpagination_dir: page\n\n\t// Disqus\n\tdisqus_shortname:\n\n\t// Extensions\n\t// Plugins: https://github.com/tommy351/hexo/wiki/Plugins\n\t// Themes: https://github.com/tommy351/hexo/wiki/Themes\n\n\tplugins:\n\t- hexo-generator-sitemap\n\n\n\ttheme: bootstrap\n\texclude_generator:\n\n\t// Deployment\n\t// Docs: http://zespia.tw/hexo/docs/deploy.html\n\tdeploy: \n\t  type: github\n\t  repository: https://github.com/hufeng825/hufeng825.github.io.git\n\t  branch: master\n ","mtime":1377913082000,"source":"_posts/hexo1.md","_id":"zq2bzpqoscq5ycif"},{"content":"title: hibernate 笔记之 基础概念和配置\ndate: 2013-08-14 15:56:58\ntags: [技术]\ncategories: hibernate\n---\n## ORM 概念\n> ORM 解决主要的问题是对象-- 关系映射， 域模型是面向对象的，而关系模型数据是面向关系的，一般情况下，一个持久化类和一个表对应，类的每个实例对应表中的一条记录。\n\n<!-- more -->\n\n### 对象的持久化\n\n• 狭义的理解,“持久化”仅仅指把对象永久保存到数据库中\n\n• 广义的理解,“持久化”包括和数据库相关的各种操作:\n\t\n* 保存:把对象永久保存到数据库中。\n\n* 更新:更新数据库中对象(记录)的状态。\n\n* 删除:从数据库中删除一个对象。\n\n* 查询:根据特定的查询条件,把符合查询条件的一个或多个对象从数据 库加载到内存中。\n\n* 加载:根据特定的OID,把一个对象从数据库加载到内 \n\t>' OID --->为了在系统中能够找到所需对象,需要为每一个对象分配一个唯一的标识号。 在关系数据库中称之为主键,而在对象术语中,则叫做对象标识(Object identifier-OID). '\n\n\n 标号  | 面向对象概念 | 面向关系概念 \n--- | --- | ---\n*1* | `对象` | **表的行（即记录）**\n2 | 属性 | 表的列（即字段）\n\n## 注意事项\n\n1. 有一个无参的构造器  反射时需要\n2.  类不能声明为final  如果声明就不能实现延迟加载了\n\n## hibernate 配置文件\n\n> hibernate.cfg.xml\n\n```\n<hibernate-configuration>\n\t<session-factory>\n\t\t<!-- 数据连接相关的配置 -->\n\t\t<property name=\"hibernate.connection.driver_class\">com.mysql.jdbc.Driver</property>\n\t\t<property name=\"hibernate.connection.url\">jdbc:mysql://localhost:3306/test</property>\n\t\t<property name=\"hibernate.connection.username\">root</property>\t\t\t\n\t\t<property name=\"hibernate.connection.password\">1234</property>\n\t\t\t\n\t\t<!-- 执行操作时显示SQL语句 -->\n\t\t<property name=\"show_sql\">true</property>\n\n\t\t<!-- 格式化输出的SQL语句 -->\n\t\t<property name=\"format_sql\">true</property>\n\t\t\n\t\t<!-- 配置数据库方言 -->\n\t\t<property name=\"hibernate.dialect\">org.hibernate.dialect.MySQLDialect</property>\t\n\t\t<property name=\"hibernate.hbm2ddl.auto\">update</property>\n\t\t\t\n\t\t<!-- 配置映射文件 -->\t\t\t\n\t\t<mapping resource=\"com/vince/entity/User.hbm.xml\"/>\t\n\t\t</session-factory>\t\n</hibernate-configuration>\n\n```\n\nhbm2ddl.auto:该属性可帮助程序员实现正向工程, 即由 java 代码生成数据库脚本, 进而生成具体的表结构. 。取值 create | update | create-drop | validate\n\n– create : 会根据 .hbm.xml 文件来生成数据表, 但是每次运行都会删 除上一次的表 ,重新生成表, 哪怕二次没有任何改变\n\n– create-drop:会根据.hbm.xml文件生成表,但是SessionFactory一关 闭, 表就自动删除\n\n– update:最常用的属性值,也会根据.hbm.xml文件生成表,但 若 .hbm.xml 文件和数据库中对应的数据表的表结构不同, Hiberante 将更新数据表结构,但不会删除已有的行和列\n\n– validate : 会和数据库中的表进行比较, 若 .hbm.xml 文件中的列在数 据表中不存在,则抛出异常\n\n* format_sql:是否将 SQL 转化为格式良好的 SQL . 取值 true | false\n\n------------------\n\n## hibernate 映射文件\n\n> User.hbm.xml\n\n```\n<?xml version=\"1.0\"?>\n<!DOCTYPE hibernate-mapping PUBLIC\n\t\"-//Hibernate/Hibernate Mapping DTD 3.0//EN\"\n\t\"http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd\">\n\n<hibernate-mapping package=\"com.vince.entity\">\n\t<class name=\"User\" table=\"USER_TABLE\" dynamic-update=\"true\" dynamic-insert=\"true\">\n\t\t<!-- 配置主键 -->\n\t\t<id name=\"id\" column=\"ID\">\n\t\t\t<!-- native表示使用本地数据库生成主键的方式 -->\n\t\t\t<generator class=\"native\"></generator>\n\t\t</id>\n\t\t<!-- 其它属性的配置 -->\n\t\t<property name=\"name\" column=\"NAME\" not-null=\"true\"></property>\n\t\t<property name=\"age\" column=\"AGE\"></property>\n\t\t<property name=\"createDate\" column=\"CREATE_DATE\"></property>\n\t</class>\n\n</hibernate-mapping>\n\n\n-------\n\n<hibernate-mapping package=\"com.vince.entity\">\n\t<class name=\"Emp\" table=\"EMP\" dynamic-insert=\"true\"\n\t\tdynamic-update=\"true\">\n\t\t<id name=\"id\" type=\"int\">\n\t\t\t<column name=\"ID\" />\n\t\t\t<generator class=\"native\" />\n\t\t</id>\n\t\t<property name=\"name\" type=\"java.lang.String\">\n\t\t\t<column name=\"NAME\" />\n\t\t</property>\n\t\t<property name=\"salary\" type=\"float\">\n\t\t\t<column name=\"SALARY\" />\n\t\t</property>\n\t\t<property name=\"age\" type=\"int\">\n\t\t\t<column name=\"AGE\" />\n\t\t</property>\n\t</class>\n</hibernate-mapping>\n\n```\n\n###主键生成策略\n\n{% img center http://ww2.sinaimg.cn/mw690/a43af4ffjw1e7n5a834npj20x00lajw6.jpg\n  hiberate 主键生成策略 %}\n\n ------\n\n\n##SessionFactory 接口\n• 针对单个数据库映射关系经过编译后的内存镜像,是线程安 全的。\n\n• Configuration 对象根据当前的配置信息生成 SessionFactory 对象。SessionFactory 对象一旦构造完毕,即被赋予特定的 配置信息\n\n* Configuration cfg = new Configuration().configure();\n\n* SessionFactory sf = cfg.buildSessionFactory();\n\n• SessionFactory是生成Session的工厂:\n\n* Session session = sf.openSession();\n\n• 构造 SessionFactory 很消耗资源\n\n\n## hibernate.hbm2ddl.auto \n1. create-drop   每次启动重新创建 结束后删除\n2. create 每次启动都重新创建\n3. update 不一样就更新\n4. validate 仅仅验证\n\n\n\n## 如何使用\n\n### 使用范例\n\n\n```\npackage hufeng.test ;\n\nimport org.hibernate.Session ;\nimport org.hibernate.SessionFactory ;\nimport org.hibernate.cfg.Configuration ;\n\npublic class  Test{\n\tpublick static void main(String[] args){\n\t// 加载hibernate 配置文件 （默认加载classpath 下的hibernate.cfg.xml）\n\tConfiguration cfg = new Configuration().config();\n\t\n\t// 通过Configulation 对象创建SessionFactory 工厂\n\tSessionFactory factory = cfg.buildSessionFactory();\n \t\n \t//Session操作数据库的一次会话\n \t//线程不安全\n \tSession session = factory.openSession();\n\n\n \t//开启事务 --> 把很多操作组合成一个整体 让事物具有原子性\n \tTransaction tx =  session.beginTransation();\n\n\n \tCustomUser user = new CustomUser(\"jason\",20,new Date());\n\n \t//保存数据\n \tsession.save(user);\n\n \t//提交事物\n \ttx.commit();\n\n \t//关闭\n \tsession.close();\n \tfactory.close();\n }\n}\n\n```\n\n### 创建Hibernate 工具类\n\n```\npublic final class HibernateUtil{\n\tprivate static SessionFactory sessionFactory;\n\tprivate HibernateUtil(){}\n\n\tstatic {\n\t\tConfiguration cfg  = new Configuration().configure();\n\t\tsessionFactory = cfg.buildSessionFactory();\n\t}\n\n\t public static SessionFactory  getSesstionFactory()\n\t {\n\t \treturn sessionFactory;\n\t }\n\n\t public static Session getSession()\n\t {\n\t \treturn sessionFactory.openSession();\n\t }\n\n\t public static void save(Object obj)\n\t {\n\t \tSession session = getSession();\n\t \tTransaction tx = session.benginTransaction();\n\t \tsession.save(obj);\n\t \tsession.evict(obj);//把对象清理出esssion 避免批处理时session中的缓存过多 导致内存溢出\n\t \t//session.clear()；清楚session中所有的对象\n\t \ttx.commit();\n\t \tsession.close();\n\t }\n}\n\n```\n\n### 应用工具类后的代码\n\n\n```\npackage hufeng.test ;\n\nimport org.hibernate.Session ;\nimport org.hibernate.SessionFactory ;\nimport org.hibernate.cfg.Configuration ;\nimport org.util.HibernateUtil;\n\npublic class Test {\n\tpublic static void save()\n\t{\n\t\tUser user =new User(\"jack\",22,new Date()));\n\t\tHibernateUtil.save(user);\n\t}\n}\n\npublick static void main(String[] args)\n{\n\tsave();\n}\n\n```\n### 更加规范应用HQL的代码\n\n```\npublic final class HibernateUtil {\n\n\tprivate static SessionFactory sessionFactory;\n\n\tprivate HibernateUtil() {\n\t}\n\n\tstatic {\n\t\tConfiguration cfg = new Configuration().configure();\n\t\tsessionFactory = cfg.buildSessionFactory();\n\t}\n\n\tpublic static SessionFactory getSessionFactory() {\n\t\treturn sessionFactory;\n\t}\n\n\tpublic static Session getSession() {\n\t\treturn sessionFactory.openSession();\n\t}\n\n\tpublic static void save(Object obj) {\n\t\tSession session = null;\n\t\ttry {\n\t\t\tsession = getSession();\n\t\t\tTransaction tx = session.beginTransaction();\n\t\t\tsession.save(obj);\n\t\t\ttx.commit();\n\t\t} catch (HibernateException e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tsession.close();\n\t\t}\n\t}\n\tpublic static void update(Object obj) {\n\t\tSession session = null;\n\t\ttry {\n\t\t\tsession = getSession();\n\t\t\tTransaction tx = session.beginTransaction();\n\t\t\tsession.update(obj);\n\t\t\ttx.commit();\n\t\t} catch (HibernateException e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tsession.close();\n\t\t}\n\t}\n\t\n\tpublic static void delete(Object obj) {\n\t\tSession session = null;\n\t\ttry {\n\t\t\tsession = getSession();\n\t\t\tTransaction tx = session.beginTransaction();\n\t\t\tsession.delete(obj);\n\t\t\ttx.commit();\n\t\t} catch (HibernateException e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tsession.close();\n\t\t}\n\t}\n\t\n\tpublic static Object get(Class clazz,Serializable id) {\n\t\tSession session = null;\n\t\ttry {\n\t\t\tsession = getSession();\n\t\t\treturn session.get(clazz, id);\n\t\t} catch (HibernateException e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tsession.close();\n\t\t}\n\t\treturn null;\n\t}\n\n}\n\n--------\n@Override\n\tpublic List<Emp> list() throws Exception {\n\t\tSession session  = HibernateUtil.getSession();\n\t\t//hql针对对象查询语句\n\t\tString hql = \"from Emp\";//\n\t\t//创建查询(hql)\n\t\tQuery query = session.createQuery(hql);\n\t\tList<Emp> list = query.list();\n\t\tsession.close();\n\t\treturn list;\n\t}\n\n\t@Override\n\tpublic void add(Emp emp) throws Exception {\n\t\tHibernateUtil.save(emp);\n\t\t\n\t}\n\n\t@Override\n\tpublic List<Emp> listByName(String name) throws Exception {\n\t\tSession session  = HibernateUtil.getSession();\n\t\tString hql = \"from Emp e where e.name=?\";\n\t\tQuery query = session.createQuery(hql);\n\t\t//sql ？起始位置从1开始\n\t\t//hql ？起始位置从0开始\n\t\tquery.setString(0, name);\n\t\t\n\t\tList<Emp> list = query.list();\n\t\tsession.close();\n\t\treturn list;\n\t}\n\n\t@Override\n\tpublic List<Emp> listByAge(int age) throws Exception {\n\t\t\n\t\t\n\t\treturn null;\n\t}\n\n\t//使用别名代替?方式，可以不用考虑设置参数的顺序\n\t@Override\n\tpublic List<Emp> listByNameAge(String name, int age) throws Exception {\n\t\tSession session = HibernateUtil.getSession();\n\t\tString hql = \"from Emp e where e.age=:age and e.name=:name\";\n\t\tQuery query = session.createQuery(hql);\n//\t\tquery.setString(0, name);\n//\t\tquery.setInteger(1, age);\n\t\tquery.setString(\"name\", name);\n\t\tquery.setInteger(\"age\", age);\n\t\t\n\t\t//对分页的支持\n\t\tquery.setFirstResult(0);//设置查询的起始位置\n\t\tquery.setMaxResults(1);//设置每页的记录数\n\t\t\n\t\t\n\t\tList<Emp> emps = query.list();\n\t\t\n\t\t\n\t\t\n\t\t//iterate查询会执行 N+1条语句\n//\t\tIterator<Emp> emps = query.iterate();\n\t\t\n\t\tsession.close();\n\t\treturn emps;\n\t}\n\n\t@Override\n\tpublic List<Emp> listLikeName(String name) {\n\t\tSession session = HibernateUtil.getSession();\n\t\tString hql = \"from Emp e where e.name like :name\";\n\t\tQuery query = session.createQuery(hql);\n\t\tquery.setString(\"name\", \"%\"+name+\"%\");\n\t\tList<Emp> list = query.list();\n\t\tsession.close();\n\t\treturn list;\n\t}\n\n\t@Override\n\tpublic Emp getByName(String name) {\n\t\tString hql = \"from Emp e where e.name=:name\";\n\t\tSession session = HibernateUtil.getSession();\n\t\tQuery query = session.createQuery(hql);\n\t\tquery.setString(\"name\", name);\n\t\t//返回唯一的结果\n\t\tEmp emp = (Emp)query.uniqueResult();\n\t\tsession.close();\n\t\treturn emp;\n\t}\n\n\t//QBC检索方式(了解)\n\t@Override\n\tpublic Emp getById(int id) {\n\t\t\n\t\tSession session = HibernateUtil.getSession();\n\t\tCriteria criteria = session.createCriteria(Emp.class);\n\t\t//添加查询条件\n\t\tcriteria.add(Restrictions.eq(\"id\", id));\n\t\tEmp emp = (Emp)criteria.uniqueResult();\n\t\tsession.close();\n\t\treturn emp;\n\t}\n\n\t@Override\n\tpublic long countEmp() {\n\t\tString hql = \"select count(id) as id from Emp\";\n\t\tSession session = HibernateUtil.getSession();\n\t\tQuery query = session.createQuery(hql);\n\t\tlong count = (long)query.uniqueResult();\n\t\tsession.close();\n\t\treturn count;\n\t}\n\tpublic void countEmp2() {\n\t\tString hql = \"select count(id),avg(age) as id from Emp\";\n\t\tSession session = HibernateUtil.getSession();\n\t\tQuery query = session.createQuery(hql);\n\t\tList list = query.list();\n\t\tObject[] objs = (Object[])list.get(0);\n\t\tint count = (int)objs[0];\n\t\tint avg = (int)objs[1];\n\t\tsession.close();\n\t}\n\n\n```\n","mtime":1377913082000,"source":"_posts/hibernate0.md","_id":"k6o2rmyq2ellnb2p"},{"content":"title: hibernate 笔记之 session\ndate: 2013-08-14 10:36:16\ntags: [技术]\ncategories: hibernate\n---\n## session 的概述\n<!-- more -->\n\n1. session 接口是hibernate 向应用程序提供操作数据库最主要的接口，他提供了基本的保存，更新，删除和加载java对象的方法\n\n2. session 具有一个缓存对象，位于缓存中的对象成为持久化对象，它和数据库中的相关记录对应，session能够在某些时间点，按照缓存中的对象变化来执行相关的sql语句。来同步更新数据库，这一过程被称为清理缓存\n\n3. 站在持久化的角度，hibernate 把对象分成四种状态：持久化状态，临界状态，游流状态 删除状态 session的特定方法能使对象从一个状态转换成另一个状态\n\n---\n## Session 接口\nSession 是应用程序与数据库之间交互操作的一个单线程对象,是 Hibernate 运作的中心,所有持久化对象必须在 session 的管理下才可以进 行持久化操作。此对象的生命周期很短。Session 对象有一个一级缓存,显 式执行 flush 之前,所有的持久层操作的数据都缓存在 session 对象处。相 当于 JDBC 中的 Connection。\n\n• 持久化类与 Session 关联起来后就具有了持久化的能力。\n\n• Session 类的方法:\n\n* 取得持久化对象的方法: get() load()\n\n* 持久化对象都得保存,更新和删除: save(),update(),saveOrUpdate(),delete()\n\n* 开启事务: beginTransaction().\n\n* 管理 Session 的方法:isOpen(),flush(), clear(), evict(), close()等\n\n\n\n```\nimport java.util.Date;\nimport java.util.UUID;\n\nimport org.hibernate.Hibernate;\nimport org.hibernate.Session;\nimport org.hibernate.Transaction;\n\nimport com.vince.entity.User;\nimport com.vince.util.HibernateUtil;\n\n\npublic class Test {\n\t\n\t\n\tpublic static void evict(){\n\t\t\n\t\tSession session = HibernateUtil.getSession();\n\t\tTransaction tx = session.beginTransaction();\n\t\t\n\t\tUser user = new User(\"test-7\",17,new Date());\n\t\tsession.save(user);\n\t\t\n\t\tsession.evict(user);//把对象从session中清除,在批量处理时，避免session中缓存的对象太多，会导致内存溢出\n//\t\tsession.clear();//清除session中所有的缓存对象\n\t\tUser user2 = (User)session.load(User.class, user.getId());\n\t\tSystem.out.println(user2);\n\t\t\n\t\ttx.commit();\n\t\tsession.close();\n\t}\n\t\n\t\n\t\n\t/**\n\t * merge方法：合并,保存或更新\n\t * \n\t * \n\t */\n\tpublic static void merge(){\n\t\tSession session = HibernateUtil.getSession();\n\t\tTransaction tx = session.beginTransaction();\n\t\t\n\t\t//情况一：临时对象(新创建的对象)\n\t\t//1)user1 的状态是瞬时对象时，创建一个新的对象user2,把user1对象的属性拷贝到新建的user2对象中,持久化这个user2对象,执行insert语句\n//\t\tUser user1 = new User();\n//\t\tuser1.setAge(22);\n//\t\tuser1.setName(\"test--3\");\n//\t\tuser1.setCreateDate(new Date());\n//\t\t\n//\t\t\n//\t\tUser user2 = (User)session.merge(user1);\n//\t\t\n//\t\tSystem.out.println(user1==user2);\n\t\t\n\t\t//情况二：user1 的状态是游离对象时，Session缓存中是否存在ID为与user1相同的持久化对象\n\t\t//(1)如果有\n//\t\tUser user2 = (User)session.load(User.class, 1);\n//\t\tUser user1 = new User();\n//\t\tuser1.setAge(20);\n//\t\tuser1.setCreateDate(new Date());\n//\t\tuser1.setId(1);\n//\t\tuser1.setName(\"test---4\");\n//\t\tsession.merge(user1);\n\t\t\n\t\t\n\t\t\n\t\t//情况三：如果session中不存在该对象，那么去数据库中查询是否存在该ID的记录，\n\t\t//如果存在，那么就加载这条记录到session中(user2)，比较两个对象属性是否一致，\n\t\t//如果不一致，就把user1的属性拷贝到user2中，执行update语句\n\t\t//如果一致，就不执行任何操作\n//\t\tUser user1 = new User();\n//\t\tuser1.setAge(22);\n////\t\tuser1.setCreateDate(new Date());\n//\t\tuser1.setId(5);\n//\t\tuser1.setName(\"aaa\");\n//\t\tsession.merge(user1);\n\t\t\n\t\t//情况四：如果session中不存在该对象，那么去数据库中查询是否存在该ID的记录，\n\t\t//如果不存在，创建一个新的对象user2,把user1对象的属性拷贝到新建的user2对象中,\n\t\t//持久化这个user2对象,执行insert语句\n\t\tUser user1 = new User();\n\t\tuser1.setAge(22);\n\t\tuser1.setCreateDate(new Date());\n\t\tuser1.setId(6);\n\t\tuser1.setName(\"bbb\");\n\t\tUser user2 = (User)session.merge(user1);\n\t\t\n\t\t\n\t\ttx.commit();\n\t\tsession.close();\n\t\t\n\t}\n\t\n\t/**\n\t * saveOrUpdate 方法：执行保存或更新\n\t * 1、如果实体对象是临时状态（没有ID），那么该方法将执行保存操作\n\t * 2、如果实体对象是游离状态（有ID），那么该方法以将执行更新操作\n\t * \t如果数据库不存在该ID，那么更新将抛出异常\n\t * 3、判断ID是否为空（整型ID 0 空），根据映射文件中的unsaved-value\n\t * \t属性值来判断\n\t */\n\tpublic static void saveOrUpdate(){\n\t\tSession session = HibernateUtil.getSession();\n\t\tTransaction tx = session.beginTransaction();\n\t\t\n\t\tUser user = new User();\n\t\tuser.setAge(21);\n\t\tuser.setName(\"test--1\");\n\t\tuser.setCreateDate(new Date());\n\t\tuser.setId(3);\n\t\t\n\t\tsession.saveOrUpdate(user);\n\t\t\n\t\ttx.commit();\n\t\tsession.close();\n\t}\n\t\n\t\n\tpublic static void delete(){\n\t\tSession session = HibernateUtil.getSession();\n\t\tTransaction tx = session.beginTransaction();\n\t\t\n//\t\tUser user = new User();\n//\t\tuser.setId(6);\n//\t\tuser.setName(\"xxx\");\n\t\t\n\t\tUser user = (User)session.load(User.class, 3);\n\t\t\n\t\tsession.delete(user);\n\t\t\n\t\tSystem.out.println(user.getId());\n\t\t\n\t\ttx.commit();\n\t\tsession.close();\n\t}\n\t\n\t/**\n\t * 更新对象:通过update方法\n\t * 1、如果数据库中不存在ID的记录，抛出异常\n\t * 2、默认生成的SQL语句会根据ID为条件更新所有字段，\n\t * 如果只更新发生变化的字段，那么在映射文件的class配置中添加 dynamic-update=true\n\t * \n\t */\n\tpublic static void update2(){\n\t\tSession session = HibernateUtil.getSession();\n\t\tTransaction tx = session.beginTransaction();\n\t\t\n//\t\tUser user = new User(\"Tom-1\",23,new Date());\n\t\tUser user = (User)session.get(User.class, 1);\n\t\t\n\t\tuser.setName(\"888\");\n\t\tsession.update(user);\n\t\t\n\t\ttx.commit();\n\t\tsession.close();\n\t}\n\t/**\n\t * 更新对象\n\t * 通过session 的脏数据机制\n\t */\n\tpublic static void update1(){\n\t\tSession session = HibernateUtil.getSession();\n\t\tTransaction tx = session.beginTransaction();\n\t\tUser user = (User)session.load(User.class, 1);\n\t\tuser.setName(\"xxx\");\n\t\ttx.commit();\n\t\tsession.close();\n\t}\n\t\n\t/**\n\t * load方法：\n\t * 1、如果数据库不存在记录，那么将抛出异常\n\t * 2、load方法先执行延迟加载，返回代理对象，在真正使用到该对象时才会\n\t * 从数据库中查询\n\t * 3、初始化代理对象的方法：\n\t * （1）调用代理对象的非主键属性\n\t * （2）Hibernate.initialize()方法初始化代理对象\n\t */\n\tpublic static User load(){\n\t\tSession session = HibernateUtil.getSession();\n\t\tTransaction tx = session.beginTransaction();\n\t\tUser user = (User)session.load(User.class, 5);\n\t\t\n//\t\tSystem.out.println(user.getName());\n\t\tHibernate.initialize(user);//初始化代理对象\n\t\ttx.commit();\n\t\tsession.close();\n\t\t\n\t\treturn user;\n\t}\n\t\n\t/**\n\t * get方法：\n\t * 1、立即从数据库中查询数据\n\t * 2、如果数据库不存在记录，那么将返回null\n\t */\n\tpublic static void get(){\n\t\tSession session = HibernateUtil.getSession();\n\t\tTransaction tx = session.beginTransaction();\n\t\tClass c = User.class;\n\t\tUser user = (User)session.get(c, 1);\n\t\tif(user!=null){\n\t\t//修改时间\n\t\tuser.setCreateDate(new Date());\n\t\t}\n\t\tSystem.out.println(user);\n\t\t\n//\t\tsession.flush();//刷新缓冲\n\t\ttx.commit();\n\t\tsession.close();\n\t}\n\t\n\t/**\n\t * save()方法以会立即为持久化对象设置主键，所有在任何时候会执行insert语句\n\t * persist()，如果在事务内部那么与save()一样，如果在事务外部，不会立即执行\n\t * insert语句\n\t */\n\tpublic static void save(){\n//\t\tUser user = new User(\"jack\",22,new Date());\n\t\tUser user = new User();\n\t\tuser.setName(\"jack\");\n\t\tSession session = HibernateUtil.getSession();\n//\t\tTransaction tx = session.beginTransaction();\n\t\tsession.save(user);\n//\t\tsession.persist(user);\n\t\t\n//\t\ttx.commit();\n\t\t\n\t\tsession.close();\n\t\t\n\t}\n\n\tpublic static void main(String[] args) {\n//\t\tsave();\n//\t\tget();\n//\t\tUser user = load();\n//\t\tSystem.out.println(user);\n\t\t\n//\t\tupdate1();\n//\t\tupdate2();\n\t\t\n//\t\tdelete();\n//\t\tsaveOrUpdate();\n//\t\tmerge();\n//\t\tevict();\n\t\t\n//\t\tSystem.out.println(UUID.randomUUID().toString());\n\t}\n\n}\n\n\n```","mtime":1377913082000,"source":"_posts/hibernate1.md","_id":"muyjnwnvly6titqh"},{"content":"title: hibernate 笔记之 \ndate: 2013-08-15 09:45:01\ntags: [技术]\ncategories: hibernate\n","mtime":1377913082000,"source":"_posts/hibernate3.md","_id":"d9kzf6c1c1shhe5c"},{"content":"title: ios 清理工程中没有用到的图片\ndate: 2013-08-29 16:43:14\ntags: [技术]\ncategories: ios\n---\n>发布前往往需要清理工程中没有用到的图片，这些图片可能是测试图片也可能是以往版本中替换遗留下来的图片\n\n<!-- more -->\n\n##使用方法\n1. 将下面代码保存成**.sh 然后chomd 777 使其可执行\n2. 将**.sh 拷贝到工程根目录下\n3. ./执行**.sh \n4.  再同级目录下会生成一个imge.txt 结果文件\n\n 如下图  \n\n{%img http://ww3.sinaimg.cn/mw690/a43af4ffjw1e83pb1zvo7j215q0pq7bz.jpg 300 500%}\n\n##源码 \n\n```\n#!/bin/sh\n\necho \"删除有风险 下手需谨慎 如需再次确认图片是否被引用到\"\n\necho \"Defult.png 和例如[UIImage imageNamed:@‘img.png'] 可能会误报\"\n\n\nread -n1 -p  \"【Y】查阅如何确认 【N】直接进行图片检索\" \n\ncase $answer in \n\n\"Y\"|\"y\") \n\nopen -a Safari \"http://blog.csdn.net/hufeng825/article/details/8533647\"\n\necho -n \"按任意键开始程序\";\n\nread var\n\n;;\n\n\"N\"|\"n\") \n\necho \"命令执行时终端会输入结果 搜索完毕后 会在当前路径下自动生成imag.txt的结果报告\"\n\n;;\n\n*) \n\n;;\n\nesac\n\n\n\n\nPROJ=`find .  ! -name '*.xib' -o -name '*.[mh]' -o -name '*.storyboard' -o -name '*.mm' -o -name '*.html' `\n\n\necho \"~~~~~~~~~~~~开始搜索~~~~~~~~~~~~\" >>'./image.txt';\n\nfor png in `find . -name '*.png'`\ndo\n\n   name=`basename -s .png $png`\n   name=`basename -s @2x $name`\n   if ! grep -qhs \"$name\" \"$PROJ\"; then\n        echo \"$png 可能没引用\" \n        echo \"$png 可能没引用\"  >>'./image.txt' ;\n   fi\ndone\n\nfor jpg in `find . -name '*.jpg'`\ndo\n   name=`basename -s .jpg $jpg`\n   name=`basename -s @2x $name`\n   if ! grep -qhs \"$name\" \"$PROJ\"; then\n        echo \"$png 可能没引用\" \n        echo \"$jpg 可能没引用\"  >>'./image.txt';\n   fi\ndone\n\necho \"~~~~~~~~~~~~结束搜索~~~~~~~~~~~~\" >>'./image.txt';\n<<EOF\n\n```","mtime":1377913082000,"source":"_posts/ios3.md","_id":"25o9n0owv1zgmmh8"},{"content":"title: removeFromSuperview添加动画使其更加高雅美观\ndate: 2013-08-29 18:29:40\ntags: [技术]\ncategories: ios\n---\n>程序中难免使用removeFromSuperview，但是view控件直接从界面突然消失会显得非常不友好，作为一个高端大气上档次的app细节处处应该注意，\n<!-- more -->\n添加一个简单的动画给用户的感觉立刻不一样了。废话不说直接上代码\n```\n   [UIView animateWithDuration:0.2\n\n                     animations:^{_logViewController.view.alpha = 0.0;}\n\n                     completion:^(BOOL finished)\n\n                                { [_logViewController.view removeFromSuperview]; }\n\n     ];\n\n\n\n```\n","mtime":1377913082000,"source":"_posts/ios4.md","_id":"0vobjr2gywu07biy"},{"content":"title: ios 通过当前view得到所在的viewcontroller\ndate: 2013-08-29 18:35:01\ntags: [技术]\ncategories: ios\n---\nlong long ago ，带过的小弟遇到了一个问题，需要从当前的控件（一般是uiview）获取当前所在的viewcontroller\n<!-- more -->\n当时给出他的解决办法\n```\n@implementation UIView (GetVCAdditions)\n- (UIViewController *)GetiewController {\n    Class vcc = [UIViewController class];\n    UIResponder *responder = self;\n    while ((responder = [responder nextResponder]))\n        if ([responder isKindOfClass: vcc])\n            return (UIViewController *)responder;\n    return nil;\n}\n\n\n```\n","mtime":1377913082000,"source":"_posts/ios5.md","_id":"byel7g33ebyza05k"},{"content":"title: ios iphone5 适配 之 如何是app 适用不通分辨率\ndate: 2013-08-29 18:44:36\ntags: [技术]\ncategories: ios\n---\niphone5适配 有如下集中种思路\n\n<!-- more -->\n\n1：利用自身的autoresize 加上代码实现\n\n2：写两套xib\n\n3：利用ios5+ 以上的autolayout\n\n前两种方式应用比较广泛 ，因为毕竟国内还有部分应用ios4.3的用户\n\n下面给第二种方式应用下的部分代码\n\n```\n- (id)init\n{\n\n    NSString    *clssName = NSStringFromClass([self class]);\n    NSString    *xibName = is4InchScreen() ?[NSString stringWithFormat:@\"%@_4inch\", clssName] : clssName;\n    self = [super initWithNibName:xibName bundle:nil];\n    if (self) {}\n    return self;\n\n}\n\n```\n\n","mtime":1377913082000,"source":"_posts/ios6.md","_id":"dtynlgdd6m29l02i"},{"content":"title: 快速清除subviews之 隐私循环\ndate: 2013-08-29 18:48:47\ntags: [技术]\ncategories: hexo\n---\n\n> 问：如何快速把当前view下的所有子view 及其子子view们删除掉\n<!-- more -->\n解答这个问题前先介绍下 NSArray \n\nNSArray 类定义的方法\n\n1.  makeObjectsPerformSelector:@select（aMethod）\n\n简介：让数组中的每个元素 都调用 aMethod \n\n2. makeObjectsPerformSelector:@select（aMethod）\n\n   　　　　              withObject:oneObject\n\n**ps：让数组中的每个元素 都调用 aMethod  并把 withObject 后边的 oneObject 对象做为参数传给方法aMethod**\n\n因此可以利用隐私循环来快速清除subviews\n\n[[self.view subviews] makeObjectsPerformSelector:@selector(removeFromSuperview)];","mtime":1377913082000,"source":"_posts/ios7.md","_id":"764y7ktuw02q88ir"},{"content":"title: ios 开发笔记之图片 Image\ndate: 2013-08-20 09:29:39\ntags: [技术]\ncategories: ios\n---\n\n##关于图片资源\nios 程序会把图片资源编译成二进制文件，程序运行时会把这些图片从磁盘加载直接到内存，如果图片很大，加载速度就会很慢。\n<!-- more -->\n为了优化提高性能，需要尽量压缩图片资源。（ps 苹果公司的UIKit 开发者Andy Matuschak指出：使用resizable image是最快的方法。）\n\n\n##关于图片资源的压缩\n如果不需要用半透明的图片 则尽量不要用png 格式的图片。相应的可以用jpg格式的。另外谷歌最新推出的一种格式webp\n  \n###1 WebP是什么\nWebP是Google推出的一种同时提供了有损压缩与无损压缩的图片格式。目前互联网上传输的数据有65%都是图片，WebP就是出于减少数据量、加速网络传输的目的而开发的。WebP希望能够达到和JPEG同水平的图片质量，但是更小的文件，以减少图片的传送时间。\n在有损压缩的状况下，WebP比同样画质的JPEG少了25% ～ 34%的文件大小 。而在无损压缩的情形中，比起用libpng产生的PNG图片，WebP少了34%的文件大小，也比用pngout再处理过的PNG图片少了26%的文件大小。\n###2 WebP的使用\nwebp图片压缩率会比jpeg、png更高，因此下载图片会更省流量，特别适合在mobile app上使用。 比如iOS app上，可以把webp编译生成framework，然后加入引用就可以是使用了。强烈推荐。\n这iOS解析时，可以直接使用 WebPImage。\nNSData *imageData = [NSData dataWithContentsOfURL:url];\nUIImage *tmpImage = [[WebPImage alloc] loadWebPFromData:imageData];\nSDWebImage最近也提供了对webp的支持，起先不支持自己写了一个分类，现在可以直接用他的UIImage+WebP\n\n\n##关于加载方式\n  imageNamed每次都读图片到缓存中，只适合频繁使用的图片，\ninitWithContentsOfFile的方法加载图片后，不缓存，适合加载不常使用的图片。 \n引导图片一般情况下只会启动一次而且图片也一般情况下比较大所以用imageNamed 会非常， 如果用initWithContentsOfFile:，这些图片所占用内存可以很快被释放\n\n>资料参考by wufawei stackoverflow\n\n\n\n","mtime":1377913082000,"source":"_posts/iosimage.md","_id":"tvt4j9doqvcya95t"},{"content":"title: Markdown \ndate: 2013-08-14 16:13:21\ntags: [技术]\ncategories: hexo\n---\n本文简单介绍下 Markdown 语法\n<!-- more -->\n\n###什么是Markdown\n\nMarkdown是一个将文本转化为HTML的工具。简单来说，Markdown是一个兼顾可读性与易用性的轻量级标记体系。Markdown并不追求大而全，它只关心HTML里最常用的几个标记，对于一些不常用的标记它允许直接将HTML标记插入文本。\n\n****\n\n##表格\n\n标号  | 面向对象概念 | 面向关系概念 \n--- | --- | ---\n*1* | `对象` | **表的行（即记录）**\n2 | 属性 | 表的列（即字段）\n\n代码如下\n\n```\n标号  | 面向对象概念 | 面向关系概念 \n--- | --- | ---\n*1* | `对象` | **表的行（即记录）**\n2 | 属性 | 表的列（即字段）\n\n```\n\n****\n\n##标题\n\nMarkdown提供了两种方式（Setext和Atx）来显示标题。\n\n代码如下\n\n```\nSetext方式\n标题1\n=================\n\n标题2\n-----------------\n\nAtx方式\n# 标题1\n## 标题2\n###### 标题6\n\n```\n****\n\n##换行\n\n在文字的末尾使用两个或两个以上的空格来表示换行。\n\n代码如下\n\n```\n> 这是一个引用，\n> 这里木有换行，   \n> 在这里换行了。\n> > 内部嵌套\n\n```\n****\n\n##列表\n\n###无序列表使用*、+或-后面加上空格来表示。\n\n代码如下 \n\n```\n* Item 1\n* Item 2\n* Item 3\n\n+ Item 1\n+ Item 2\n+ Item 3\n\n- Item 1\n- Item 2\n- Item 3\n\n```\n\n\n###有序列表使用数字加英文句号加空格表示。\n\n\n代码如下 \n\n```\n1. Item 1\n2. Item 2\n3. Item 3\n\n\n```\n\n****\n\n##代码区域\n\n行内代码使用反斜杠`表示。 \n代码段落则是在每行文字前加4个空格或者1个缩进符表示。\n\n****\n\n\n##强调\n\nMarkdown使用\\*或\\_表示强调。\n\n\n代码如下 \n\n```\n\n单星号 = *斜体*\n单下划线 = _斜体_\n双星号 = **加粗**\n双下划线 = __加粗__\n\n```\n\n链接\n\nMarkdown支持两种风格的链接：Inline和Reference。\n\n语法：\n\nInline：以中括号标记显示的链接文本，后面紧跟用小括号包围的链接。如果链接有title属性，则在链接中使用空格加“title属性”。\nReference：一般应用于多个不同位置使用相同链接。通常分为两个部分，调用部分为[链接文本][ref]；定义部分可以出现在文本中的其他位置，格式为[ref]: http://some/link/address (可选的标题)。 \n注：ref中不区分大小写。\n\n代码如下 \n\n```\n\n这是一个Inline[示例](http://www.baidu.com \"可选的title\")。\n这是一个Reference[示例][ref]。\n[ref]: http://www.baidu.com \n\n```\n\n****\n\n## 图片\n\n图片的使用方法基本上和链接类似，只是在中括号前加叹号。 \n注：Markdown不能设置图片大小，如果必须设置则应使用HTML标记<img>。\n\n代码如下 \n\n```\n{% img right http://ww4.sinaimg.cn/large/a43af4ffjw1e3nomotys9j.jpg 300 400 可选的title %}\nInline示例：![替代文本](http://ww4.sinaimg.cn/large/a43af4ffjw1e3nomotys9j.jpg \"可选的title\")\nReference示例：![替代文本][pic]\n[pic]: http://ww4.sinaimg.cn/large/a43af4ffjw1e3nomotys9j.jpg \"可选的title\"\nHTML示例：<img src=\"http://ww4.sinaimg.cn/large/a43af4ffjw1e3nomotys9j.jpg\" alt=\"替代文本\" title=\"标题文本\" width=\"200\" />\n\n```\n效果\n\n{% img right http://ww4.sinaimg.cn/large/a43af4ffjw1e3nomotys9j.jpg 300 400 可选的title %}\nInline示例：![替代文本](http://ww4.sinaimg.cn/large/a43af4ffjw1e3nomotys9j.jpg \"可选的title\")\nReference示例：![替代文本][http://ww4.sinaimg.cn/large/a43af4ffjw1e3nomotys9j.jpg]\n[pic]: /assets/images/ship.jpg \"可选的title\"\nHTML示例：<img src=\"http://ww4.sinaimg.cn/large/a43af4ffjw1e3nomotys9j.jpg\" alt=\"替代文本\" title=\"标题文本\" width=\"200\" />\n\n****\n\n\n## 自动链接\n\n使用尖括号，可以为输入的URL或者邮箱自动创建链接。如test@test.com。\n\n## 分隔线\n\n在一行中使用三个或三个以上的*、-或_可以添加分隔线，其中可以有空白，但是不能有其他字符。\n\n## 转义字符\n\nMarkdown中的转义字符为\\，可以转义的有：\n```\n\\\\ 反斜杠\n\\` 反引号\n\\* 星号\n\\_ 下划线\n\\{\\} 大括号\n\\[\\] 中括号\n\\(\\) 小括号\n\\# 井号\n\\+ 加号\n\\- 减号\n\\. 英文句号\n\\! 感叹号\n\n```\n\n\n\n","mtime":1377913082000,"source":"_posts/markdown.md","_id":"eaqariavvv4x050b"},{"content":"title: 工作四年多了\ndate: 2013-08-08 17:16:03\ntags: [情感]\ncategories: 情感\n---\n##工作好几年了 谈谈自己的一些感想吧\n\n最近几件事情触动挺大的，\n<!--more-->\n\n1：跟侯的差距越来越远了， 不到三年 侯做到了很多我没做到的事情1-)自考了北大计算机系 2-)结识了年薪几十万的漂亮嫂子 3-）拿到了驾照 4-）在燕郊买了房子\n\n虽然彼此间还是隔三差五的聚聚，但是间隔越来越长了，大家都在忙，而我是真的在瞎忙 忙的没有任何意义。\n\n2：家里的压力，家里的压力从催着找女朋友结婚 到现在的赶紧攒首付买房子，之前很天真的甚至有些自私的想 不结婚不要孩子，可是现在觉得真的很对不起两个老人的\n\n3：同事和朋友，现在还记得几年前 sally姐说的那句话 同事永远成不了朋友。 有一次跟周妈谈起旺哥为什么不喜欢带新人，周妈谈了一口气说 旺旺是被现在这个社会伤的太深了了。虽然不太清楚在旺哥身上发生过什么 但是 回想这几年发生在自己身上的事情 也能体会的到写。现在这年头 不要期待着知恩图报 祈求不要恩将仇报就好了。 \n\n4：多一事不如少一事。  自己的经历应该放到有价值的人和事上面。 \n\n5：金钱虽然不是唯一的判断标准 但是却是最有效的衡量一个人的办法。\n\n6：珍惜零散的时间 \n\n7：英语 very important\n\n8：一些事情心里明白就行了 不要说出来\n\n{% img right profile http://img.my.csdn.net/uploads/201101/25/3619941_1295933551y8U4.jpg 300 500 昔日的小伙伴 %} ","mtime":1377913082000,"source":"_posts/mood.md","_id":"hmnnqt5kne1dkgkd"},{"content":"title: MQ 笔记之 mac 下安装环境\ndate: 2013-08-20 17:47:34\ntags: [技术]\ncategories: MQ\n---\n##下载\n[从下载地址中下载包](http://www.apache.org/dyn/closer.cgi?path=/activemq/apache-activemq/5.8.0/apache-activemq-5.8.0-bin.tar.gz)\n解压包然后把包放到一个自己不会手一抖就删掉的位置，此处我放到了本地的document下\n如下图\n<!-- more -->\n{% img left http://ww2.sinaimg.cn/mw690/a43af4ffjw1e7uav8h7lbj20o80gkjtw.jpg 200 300 图片%}\n## 添加环境到path \n把/你的保存路径/apache-activemq-5.8.0/bin/activemq 添加到 PATH 中 \n\n0. cd \n1. 执行 vi .profile \n2. 输入 i \n3. 插入 export MQ=/你的路径/apache-activemq-5.8.0/bin/macosx/activemq\n4. wq\n5. source .profile\n\n## 启动mq\n$Mq start\n输入账号 admin 密码  admin\n\n**注意** 如果用代理上网 请把网络环境设置下 如下图\n{% img http://ww1.sinaimg.cn/mw690/a43af4ffjw1e7ubcv9nx0j20oa08egmc.jpg 200 300 网络配置 %}\n\n##查看启动效果\n{% img http://ww1.sinaimg.cn/mw690/a43af4ffjw1e7ubfs7cg1j21ga0oe0yw.jpg 200 300 启动效果 %}\n\n## 基本配置\nconf/jetty.xml\n```\n<bean id=\"securityConstraint\">\n \n        <property name=\"name\" value=\"BASIC\" />\n \n        <property name=\"roles\" value=\"admin\" />\n \n        <property name=\"authenticate\" value=\"false\" />\n \n</bean>\n\n```\n此处可以配置登陆用户权限\n\n\n```\n <property name=\"connectors\">\n            <list>\n                <bean id=\"Connector\" class=\"org.eclipse.jetty.server.nio.SelectChannelConnector\">\n                    <property name=\"port\" value=\"8161\" />\n                </bean>\n            </list>\n </property>\n\n```\n此处用来修改端口号\n\n\n\n\n\n","mtime":1377913082000,"source":"_posts/mq1.md","_id":"w25t2k1u5tz18h0s"},{"content":"title: MQ 笔记之 JMS 简介 （什么是JMS）\ndate: 2013-08-21 21:22:00\ntags: [技术]\ncategories: MQ\n---\n##一：JMS基本概念\n\n###1.      JMS的目标\n\n为企业级的应用提供一种智能的消息系统，JMS定义了一整套的企业级的消息概念与工具，\n<!-- more -->\n\n尽可能最小化的Java语言概念去构建最大化企业消息应用。统一已经存在的企业级消息系\n\n统功能。\n\n###2.      JMS提供者\n\nJMS提供者是指那些完全完成JMS功能与管理功能的JMS消息厂商，理论上JMS提供者完成 \n\nJMS消息产品必须是100%的纯Java语言实现，可以运行在跨平台的架构与操作系统上，当前\n\n一些JMS厂商包括IBM,Oracle, JBoss社区 (JBoss Community), Apache 社区(ApacheCommunity)。\n\n###3.      JMS应用程序, 一个完整的JMS应用应该实现以下功能：\n\n* JMS 客户端 – Java语言开发的接受与发送消息的程序\n\n* 非JMS客户端 – 基于消息系统的本地API实现而不是JMS\n\n* 消息 – 应用程序用来相互交流信息的载体\n\n* 被管理对象–预先配置的JMS对象，JMS管理员创建，被客户端运用。如链接工厂，主题等\n\n* JMS提供者–完成JMS功能与管理功能的消息系统\n\n##二: JMS 规范\n\n\n### 连接工厂\n连接工厂是GUST用来创建连接的对象，例如ActiveMQ提供的ActiveMQConnectionFactory。\n\n### 连接\nJMS Connection封装了客户与JMS提供者之间的一个虚拟的连接。\n\n### 会话\nMS Session是生产和消费消息的一个单线程上下文。会话用于创建消息生产者（producer）、消息消费者（consumer）和消息（message）等。会话提供了一个事务性的上下文，在这个上下文中，一组发送和接收被组合到了一个原子操作中。\n\n### 目的地\n目的地是客户用来指定它生产的消息的目标和它消费的消息的来源的对象。JMS1.0.2 规范中定义了两种消息传递域\n\n####点对点的消息模式(Point to Point Messaging)\n{%img http://ww2.sinaimg.cn/mw690/a43af4ffjw1e7umekfemwj20is06o0tb.jpg  300  200 点对点 %}\n\n***\n\n下面的JMS对象在点对点消息模式中是必须的：\n\n* 队列(Queue) – 一个提供者命名的队列对象，客户端将会使用这个命名的队列对象\n\n* 队列链接工厂(QueueConnectionFactory) – 客户端使用队列链接工厂创建链接队列ConnectionQueue来取得与JMS点对点消息提供者的链接。\n\n* 链接队列(ConnectionQueue) – 一个活动的链接队列存在在客户端与点对点消息提供者之间，客户用它创建一个或者多个JMS队列会话(QueueSession)\n\n* 队列会话(QueueSession) – 用来创建队列消息的发送者与接受者(QueueSenderandQueueReceiver)\n\n* 消息发送者(QueueSender 或者MessageProducer)– 发送消息到已经声明的队列\n\n* 消息接受者(QueueReceiver或者MessageConsumer) – 接受已经被发送到指定队列的消息\n\n**注意如下：**\n\n* 每个消息只能有一个消费者。\n* 消息的生产者和消费者之间没有时间上的相关性。无论消费者在生产者发送消息的时候是否处于运行状态，它都可以提取消息。\n\n#### 发布订阅模式(publish – subscribe Mode)\n\n{%img center http://ww1.sinaimg.cn/mw690/a43af4ffjw1e7umpp9onwj20is0ayjsk.jpg  200  300 发布者 %}\n***\n* 主题Topic(Destination) – 一个提供者命名的主题对象，客户端将会使用这个命名的主题对象\n\n* 主题链接工厂(TopciConnectionFactory) – 客户端使用主题链接工厂创建链接主题 ConnectionTopic来取得与JMS消息Pub/Sub提供者的链接\n\n* 链接主题(ConnectionTopic) – 一个活动的链接主题存在发布者与订阅者之间\n\n* 会话(TopicSession) – 用来创建主题消息的发布者与订阅者 (TopicPublisher  and TopicSubscribers)\n\n* 消息发送者MessageProducer) – 发送消息到已经声明的主题\n\n* 消息接受者(MessageConsumer) – 接受已经被发送到指定主题的消息\n\n**注意如下：**\n\n* 每个消息可以有多个消费者。\n* 生产者和消费者之间有时间上的相关性。订阅一个主题的消费者只能消费自它订阅之后发布的消息。JMS规范允许客户创建持久订阅，这在一定程度上放松了时间上的相关性要求。持久订阅允许消费者消费它在未处于激活状态时发送的消息。\n\n****\n>本系列博文参考自whitesock  淮少吧 贾志刚\n\n","mtime":1377913082000,"source":"_posts/mq2.md","_id":"22nm0qm5r5v08bxy"},{"content":"title: MQ 笔记之 消息持久化\ndate: 2013-08-21 23:43:37\ntags: [技术]\ncategories: MQ\n---\n>在broker中设置属性persistent=”true”(默认是true)，同时发送的消息也应该是persitent类型的。ActiveMQ消息持久化有三种方式：AMQ、KahaDB、JDBC。\n配置文件在config/jetty.xml\n<!-- more -->\n\n##一、AMQ\nAMQ是一种文件存储形式，它具有写入速度快和容易恢复的特点。消息存储在一个个文件中，文件的默认大小为32兆，如果一条消息的大小超过了32兆，那么这个值必须设置大点。当一个存储文件中的消息已经全部被消费，那么这个文件将被标识为可删除，在下一个清除阶段，这个文件被删除。默认配置如下：\n\n```   \n<persistenceAdapter>\n  <amqPersistenceAdapter directory=\"activemq-data\" maxFileLength=\"32mb\"/>\n</persistenceAdapter>\n\n```\n\n属性名称\t| 默认值\t| 描述\n--- | --- | ---\ndirectory\t| activemq-data\t | 消息文件和日志的存储目录\nuseNIO\t| true\t| 使用NIO协议存储消息\nsyncOnWrite |\tfalse |\t同步写到磁盘，这个选项对性能影响非常大\nmaxFileLength\t| 32mb\t| 一个消息文件的大小\npersistentIndex\t| true\t| 消息索引的持久化，如果为false，那么索引保存在内存中\nmaxCheckpointMessageAddSize\t| 4kb\t| 一个事务允许的最大消息量\ncleanupInterval\t| 30000\t| 清除操作周期，单位ms\nindexBinSize\t| 1024\t| 索引文件缓存页面数，缺省为1024，当amq扩充或者缩减存储时，会锁定整个broker，导致一定时间的阻塞，所以这个值应该调整到比较大，但是代码中实现会动态伸缩，调整效果并不理想。\nindexKeySize\t| 96\t| 索引key的大小，key是消息ID\nindexPageSize\t| 16kb\t| 索引的页大小\ndirectoryArchive\t| archive |\t存储被归档的消息文件目录\narchiveDataLogs\t| false\t| 当为true时，归档的消息文件被移到directoryArchive,而不是直接删除\n\n--------\n\n##二、 KahaDB\n\nKahaDB是基于文件的本地数据库储存形式，虽然没有AMQ的速度快，但是它具有强扩展性，恢复的时间比AMQ短，从5.4版本之后KahaDB做为默认的持久化方式。默认配置如下\n\n```\n <persistenceAdapter>\n        <kahaDB directory=\"activemq-data\" journalMaxFileLength=\"32mb\"/>\n </persistenceAdapter>\n\n```\nKahaDB的属性：\n\nproperty name\t| default value\t| Comments\n--- | --- | ---\ndirectory\t| activemq-data\t| 消息文件和日志的存储目录\nindexWriteBatchSize\t| 1000\t| 一批索引的大小，当要更新的索引量到达这个值时，更新到消息文件中\nindexCacheSize\t| 10000\t| 内存中，索引的页大小\nenableIndexWriteAsync |\tfalse |\t索引是否异步写到消息文件中\njournalMaxFileLength\t| 32mb\t| 一个消息文件的大小\nenableJournalDiskSyncs\t| true\t| 是否讲非事务的消息同步写入到磁盘\ncleanupInterval\t| 30000\t| 清除操作周期，单位ms\ncheckpointInterval\t| 5000\t| 索引写入到消息文件的周期，单位ms\nignoreMissingJournalfiles\t| false | \t忽略丢失的消息文件，false，当丢失了消息文件，启动异常\ncheckForCorruptJournalFiles\t| false\t|检查消息文件是否损坏，true，检查发现损坏会尝试修复\nchecksumJournalFiles\t| false |\t产生一个checksum，以便能够检测journal文件是否损坏。\n`5.4版本之后有效的属性:`\t | |\t\narchiveDataLogs\t| false\t| 当为true时，归档的消息文件被移到directoryArchive,而不是直接删除\ndirectoryArchive\t| null\t| 存储被归档的消息文件目录\ndatabaseLockedWaitDelay\t| 10000\t| 在使用负载时，等待获得文件锁的延迟时间，单位ms\nmaxAsyncJobs\t| 10000 |\t同个生产者产生等待写入的异步消息最大量\nconcurrentStoreAndDispatchTopics |\tfalse\t| 当写入消息的时候，是否转发主题消息\nconcurrentStoreAndDispatchQueues | true\t| 当写入消息的时候，是否转发队列消息\n5.6版本之后有效的属性:\t | |\t\narchiveCorruptedIndex\t| false |\t是否归档错误的索引\n\n从5.6版本之后，有可能发布通过多个kahadb持久适配器来实现分布式目标队列存储。什么时候用呢？如果有一个快速的生产者和消费者，当某一个时刻生产者发生了不规范的消费，那么有可能产生一条消息被存储在两个消息文件中，同时，有些目标队列是危险的并且要求访问磁盘。在这种情况下，你应该用通配符来使用mKahaDB。如果目标队列是分布的，事务是可以跨越多个消息文件的。\n\n每个KahaDB的实例都可以配置单独的适配器，如果没有目标队列提交给filteredKahaDB，那么意味着对所有的队列有效。如果一个队列没有对应的适配器，那么将会抛出一个异常。配置如下：\n\n```\n<persistenceAdapter>\n  <mKahaDB directory=\"${activemq.base}/data/kahadb\">\n    <filteredPersistenceAdapters>\n      <!-- match all queues -->\n      <filteredKahaDB queue=\">\">\n        <persistenceAdapter>\n          <kahaDB journalMaxFileLength=\"32mb\"/>\n        </persistenceAdapter>\n      </filteredKahaDB>\n      \n      <!-- match all destinations -->\n      <filteredKahaDB>\n        <persistenceAdapter>\n          <kahaDB enableJournalDiskSyncs=\"false\"/>\n        </persistenceAdapter>\n      </filteredKahaDB>\n    </filteredPersistenceAdapters>\n  </mKahaDB>\n </persistenceAdapter>\n\n```\n如果filteredKahaDB的perDestination属性设置为true，那么匹配的目标队列将会得到自己对应的KahaDB实例。配置如下\n\n```\n<persistenceAdapter>\n  <mKahaDB directory=\"${activemq.base}/data/kahadb\">\n    <filteredPersistenceAdapters>\n      <!-- kahaDB per destinations -->\n      <filteredKahaDB perDestination=\"true\" >\n        <persistenceAdapter>\n          <kahaDB journalMaxFileLength=\"32mb\" />\n        </persistenceAdapter>\n      </filteredKahaDB>\n    </filteredPersistenceAdapters>\n  </mKahaDB>\n </persistenceAdapter>\n\n```\n\n##三、 JDBC\n\n配置JDBC适配器\n\n```\n<persistenceAdapter>\n        <jdbcPersistenceAdapter dataSource=\"#mysql-ds\" createTablesOnStartup=\"false\" />\n</persistenceAdapter>\n\n```\ndataSource指定持久化数据库的bean，createTablesOnStartup是否在启动的时候创建数据表，默认值是true，这样每次启动都会去创建数据表了，一般是第一次启动的时候设置为true，之后改成false。\n\nMYSQL持久化bean\n\n```\n<bean id=\"mysql-ds\" class=\"org.apache.commons.dbcp.BasicDataSource\" destroy-method=\"close\">\n    <property name=\"driverClassName\" value=\"com.mysql.jdbc.Driver\"/>\n    <property name=\"url\" value=\"jdbc:mysql://localhost/activemq?relaxAutoCommit=true\"/>\n    <property name=\"username\" value=\"activemq\"/>\n    <property name=\"password\" value=\"activemq\"/>\n    <property name=\"poolPreparedStatements\" value=\"true\"/>\n</bean>\n\n```\nSQL Server持久化bean\n\n```\n <bean id=\"mssql-ds\" class=\"net.sourceforge.jtds.jdbcx.JtdsDataSource\" destroy-method=\"close\">\n   <property name=\"serverName\" value=\"SERVERNAME\"/>\n   <property name=\"portNumber\" value=\"PORTNUMBER\"/>\n   <property name=\"databaseName\" value=\"DATABASENAME\"/>\n   <property name=\"user\" value=\"USER\"/>\n   <property name=\"password\" value=\"PASSWORD\"/>\n </bean>\n\n```\nOracle持久化bean\n\n```\n<bean id=\"oracle-ds\" class=\"org.apache.commons.dbcp.BasicDataSource\" destroy-method=\"close\">\n\t<property name=\"driverClassName\" value=\"oracle.jdbc.driver.OracleDriver\"/>\n\t<property name=\"url\" value=\"jdbc:oracle:thin:@10.53.132.47:1521:activemq\"/>\n\t<property name=\"username\" value=\"activemq\"/>\n\t<property name=\"password\" value=\"activemq\"/>\n\t<property name=\"maxActive\" value=\"200\"/>\n\t<property name=\"poolPreparedStatements\" value=\"true\"/>\n</bean>\n\n```\nDB2持久化bean\n\n```\n<bean id=\"db2-ds\" class=\"org.apache.commons.dbcp.BasicDataSource\"  destroy-method=\"close\">\n      <property name=\"driverClassName\" value=\"com.ibm.db2.jcc.DB2Driver\"/>\n      <property name=\"url\" value=\"jdbc:db2://hndb02.bf.ctc.com:50002/activemq\"/>\n      <property name=\"username\" value=\"activemq\"/>\n      <property name=\"password\" value=\"activemq\"/>\n      <property name=\"maxActive\" value=\"200\"/>\n      <property name=\"poolPreparedStatements\" value=\"true\"/>\n</bean>\n\n```\n\n\n-----\n>本博文from 淮少吧 \n\n\n","mtime":1377913082000,"source":"_posts/mq3.md","_id":"37a7fs8o5vdqugmd"},{"content":"title: MQ 笔记之 游标 及其游标优化\ndate: 2013-08-22 09:38:51\ntags: [技术]\ncategories: MQ\n---\n\n##概观 \n>在ActiveMQ的Broker中，光标用来持有一批在内存等待发送目标地址的消息。默认情况下这小消息被从存储器取出只想一个cursor(存储光标)  \n<!-- more -->\n5.0.0版本后，Activemq实现了一种新的内存模型来防止慢消费者阻塞快速生产者。通常消息在未消费或者发送后未收到消费者的确认信息时都会持久保存消息到存储中。当有消费者来消费消息时，broker会分页一批一批的从存储中取出消息，放入消息处理队列。游标就是指向下次批量获取消息时的存储位置。   \n\nctiveMQ有另一种游标实现，VM cursor，在某些情境下非常快。VM cursor是，进入的消息直接关联cursor，同时存储到消息存储器中。（关联cursor的同时存储到消息存储器中）。如果消费者（consumer）非常快，可以跟的上消息流的话，VM cursor会工作的非常好。但是，对于慢消费者，这个策略就不是那么有效了。VMcursor被积压的消息填满，同时它可能会去调用流控制去抑制producer生产message。\n\n##根据游标的保存方式不同，可分为三种类型：\n\n###Store-based cursors \nbroker默认采用的游标。它将游标信息保存在存储中。针对速度不同的消费者，这种游标机制采取的方式不同。对于快速消费者，因为消费速度很快，存储中 的消息数量会很少，所以不需要游标。这时，消息发送到broker时，先保存在持久存储中，然后直接发送给了消费者。而对于慢消费者，消息的持久存储中会 保存大量的消息，所以需要使用游标来指定下一次批量读取消息的位置。  \n\n{% img center http://ww2.sinaimg.cn/mw690/a43af4ffjw1e7v81y31hnj20ip04qaaj.jpg  Store-based实现原理图 300 200 %}\n **图一：**\n\n \t消息接收后，首先完成消息存储的工作，如(1)所示，然后会判断是否有空闲的内存可用，如果有的话，就走路径1，直接把消息存放在内存中的LinkedHashMap，如果没有可用内存，则走路径2，当需要消息的时候，直接从消息存储的介质里每次读取一批消息，然后存入LinkedHashMap。\n\n### VM cursors \n若消费者能跟上生产者生产的速度，这时持久存储中消息虽然不是很多，但是若能也能在内存中保存一些游标，对获取存储中的消息的性能会有很大的提升。 \n那么VM Cursors在ActiveMQ4.x中是如何工作的呢？发送消息保存在内存中，并在需要的时候传递给调度队列。这可以是非常快的，但也有不利的一面，不能够处理非常缓慢的消费者或消费者已经很长一段时间处于非活动状态：   \n{%img center http://ww2.sinaimg.cn/mw690/a43af4ffjw1e7v878r0ahj20iu04tjrr.jpg  file实现原理图 300 200%}\n  **图二：**\n\n\t消息接收后，首先完成消息存储的工作，如(1)所示，然后会判断是否有空闲的内存可用，如果有的话，就走路径1，直接把消息存放在内存中的LinkedList，如果没有可用内存，则走路径2，把消息写入临时文件中，当需要消息的时候，直接从临时文件中读写一批，然后送入LinkedList。\n\n\n### File-based cursors \n对VM cursors 的一种改进。当内存中的游标达到一定限额后，就会将一些游标存储到磁盘上的临时文件中。使用这种类型的游标时，消息储存可能会变慢，但消费者处理一般都会更快。通过缓冲到磁盘，它可以让消息代理来处理不受内存限制的大量消息，而生产者发送消息的速度会受到影响：\n **图三**\n\n {%img center http://ww1.sinaimg.cn/mw690/a43af4ffjw1e7v8airx6dj20it04sjrl.jpg vm 实现原理 300 200%}\n \t消息接收后，首先完成消息存储的工作，如(1)所示，然后直接把消息存放在内存中的LinkedList。\n\n\n###Paging for Non-Persistent Messages（非持久性的消息分页调度）\nStore based cursor也可以处理非持久性的消息，也就是没有存储在磁盘中的消息，非持久性消息被直接传递给游标，所以Store based cursor也只是嵌入了File based cursor的功能。\n\n\n## 3种消息cursor的比较\n消息cursor类型 | 性能 |稳定性 | 最佳使用场景\n---| --- | --- | --- |\nStore-based | 当内存不够时，需要进行1次消息存储操作，性能在3种方式中居中 | 最好 | activeMQ默认使用该cursor，因为它能满足大部分场景需要\nFile | 当内存不够时，需要进行2次消息存储操作，并且在删除消息的时候也就相应的要删除2次，性能在3种方式中最差 | 居中 | 主要用在当消息存储慢(如消息是放在数据库里)，并且消费者相对快的情况下\nVM | 在内存够的情况下，3种message cursor性能一样 | 最容易出现内存溢出的问题 | 很快，但不能处理慢消息消费者\n \n###基于存储的消息指针_测试结果\n\n测试方法 | 结果说明 | 是否通过 | 备注\n--- | --- | --- | --- |\n开500个queue 持久化消息/非持久化消息 的发送客户端，一直发送,不接收，因为是默认的，所以不用在服务器端配置。 | 1．对于非持久化消息，一定数量之后，也会产生临时文件。 2．对于持久化的消息，则适用该方式的消息指针，直到达到磁盘空间的设置上限。 |  是 | \n\n###VM消息指针_测试结果\n\n测试方法 | 结果说明 | 是否通过 | 备注 \n--- | --- | --- | --- |\n开500个queue 持久化消息/非持久化消息 的发送客户端，一直发送，在Activemq.xml配置文件中配置：cursore 队列中存储到一定量消息的时候，broker不再接收生产者发送过来的消息，56W左右，broker也不报错，客户端也不报错。 |  是  | 若设置producerflowControl=false，则消息数量持续增长，直到broker报错：WARN  AMQMessageStore  - Message could not be added to long term store: Java heap space java.lang.OutOfMemoryError: Java heap space \n\n\n###基于文件的消息指针_测试结果\n\n测试方法 | 结果说明 | 是否通过 | 备注\n--- | --- | --- | --- |\n开500个queue 持久化消息/非持久化消息 的发送客户端，一直发送，在Activemq.xml配置文件中配置：fileQueueCursor | 一段时间之后，broker打印出一信息：INFO MonetStore - Monet Store using data directory \"C:\\Activemq 5.1\\bin\\..  \\data\\localhost\\tmp_storage\"  临时文件被放置在tmp_storage目录下 | 是 |\n \n \n \n\n \n \n \n \n\n\n-----------\n\n##Configuring Cursors\nActivemq默认使用store-based游标。当然也可为不同的Destination修改游标策略。通过修改destinationPolicy节点来更改默认配置。  \ndestinationPolicy节点包含多ge policyMap节点。  \npolicyMap包含一个policyEntries节点，policyEntries节点包含多个policyEntry 节点。policyEntry就是具体的一个游标策略了。  \nTopics的消费者分为持久订阅者和临时订阅者，所以有两套配置。Queues只有一类消费者，所以只有一套配置。\n对于持久订阅者可以使用PendingDurableSubscriberMessageStoragePolicy来指定游标策略。可配置的策略有vmDurableCursor和fileDurableSubscriberCursor. \n\n\n**对于临时订阅者可以使用pendingSubscriberPolicy 来指定。可配置的策略有vmCursor和fileCursor。下面是关于Topics的一些xml配置：**\n\n```\n<beans ... >\n<broker ...>\n    ...\n<destinationPolicy>\n<policyMap>\n<policyEntries>\n<policyEntrytopic=\"com.iona.>\">\n            ...\n<pendingSubscriberPolicy>\n<vmCursor/>\n</pendingSubscriberPolicy>\n<PendingDurableSubscriberMessageStoragePolicy>\n<fileDurableSubscriberPolicy/>\n</PendingDurableSubscriberMessageStoragePolicy>\n            ...\n</policyEntry>\n          ...\n</policyEntries>\n</policyMap>\n</destinationPolicy>\n    ...\n</broker>\n  ...\n</beans>\n\n```\n\n**Queues 同样也有vm和file两种类型的游标存储策略。pendingQueuePolicy 节点的可配置子节点有vmQueueCursor和fileQueueCursor**\n\n```\n<beans ... >\n<broker ...>\n        ...   \n<destinationPolicy>\n<policyMap>\n<policyEntries>\n<policyEntryqueue=\"com.iona.>\">  \n                ...   \n<pendingQueuePolicy>\n<vmQueueCursor/>\n</pendingQueuePolicy>\n                ...   \n</policyEntry>\n              ...   \n</policyEntries>\n</policyMap>\n</destinationPolicy>\n        ...   \n</broker>\n      ...   \n</beans>\n\n```\n\n\n### 配置vmcursor：\n下面配置了一个borker的所有topic和queue都使用了vmCursor\n\n```\n<broker ... >\n  ...\n  <destinationPolicy>\n    <policyMap>\n      <policyEntries>\n        <policyEntry topic=\">\">\n          <pendingSubscriberPolicy>\n            <vmCursor />\n          </pendingSubscriberPolicy>\n        </policyEntry>\n        <policyEntry queue=\">\">\n          <pendingSubscriberPolicy>\n            <vmCursor />\n          </pendingSubscriberPolicy>\n        </policyEntry>\n      </policyEntries>\n    </policyMap>\n  </destinationPolicy>\n  ...\n</broker>\n\n```\ntopic和queue都使用了通配符【>】,这个匹配所有的目标名称。你可以根据情况指定一些选择目标的模式。但是VM Cursor仅仅适用于那些消费者可以跟得上目标消息节奏的这种情况。\n\n\n-------\nhttp://www.cnblogs.com/kaka/archive/2012/07/24/2606699.html\nhttp://netcomm.iteye.com/blog/470585\n","mtime":1377913082000,"source":"_posts/mq4.md","_id":"2114trv1v1zivwaj"},{"content":"title: MQ 笔记之 发送接受实例\ndate: 2013-08-23 10:27:45\ntags: [技术]\ncategories: MQ\n---\n> mq 支持多种发送格式  BytesMessage  MapMessage ObjectMessage TextMessage StreamMessage等\n<!-- more -->\n\n本文章以 MapMessage 和 ObjectMessage 为例\n\n**注意 发送ObjectMessage时  接受实例必须相同类名**\n\n\n##发送实例\nimport org.apache.activemq.ActiveMQConnectionFactory;\n\nimport javax.jms.*;\n\n\npublic class Send {\n\n\n public static void main(String[] args) throws Exception {\n        ConnectionFactory connectionFactory = new ActiveMQConnectionFactory();\n\n        Connection connection = connectionFactory.createConnection();\n        connection.start();\n\n        Session session = connection.createSession(Boolean.TRUE, Session.AUTO_ACKNOWLEDGE);\n        Destination destination = session.createQueue(\"hf\");\n\n        MessageProducer producer = session.createProducer(destination);\n       for(int i=0; i<3; i++) {\n//            MapMessage message = session.createMapMessage();\n//           message.setLong(\"count\", new Date().getTime());\n//            message.setObject(\"hf\",new SendData());\n      ObjectMessage message = session.createObjectMessage();\n      message.setObject(new SendData());\n//           message.setBytes(\"count\", getTestData(1));\n            Thread.sleep(1);\n            //通过消息生产者发出消息\n            producer.send(message);\n        }\n        session.commit();\n        session.close();\n        connection.close();\n    }\n}\n\n\n##接收实例\n\n```\nimport org.apache.activemq.ActiveMQConnectionFactory;\n\nimport javax.jms.*;\n\npublic class Recive {\n\npublic static void main(String[] args) throws Exception {\n    ConnectionFactory connectionFactory = new ActiveMQConnectionFactory();\n\n    Connection connection = connectionFactory.createConnection();\n    connection.start();\n\n    final Session session = connection.createSession(Boolean.TRUE, Session.AUTO_ACKNOWLEDGE);\n    Destination destination = session.createQueue(\"hf\");\n\n    MessageConsumer consumer = session.createConsumer(destination);\n/*//listener 方式\nconsumer.setMessageListener(new MessageListener() {\n\n    public void onMessage(Message msg) {\n        MapMessage message = (MapMessage) msg;\n        //TODO something....\n        System.out.println(\"收到消息：\" + new Date(message.getLong(\"count\")));\n        session.commit();\n    }\n\n});\nThread.sleep(30000);\n\t*/\n\tint i=0;\n\twhile(i<100) {\n\ti++;\n\t//            MapMessage message = (MapMessage) consumer.receive();\n\tObjectMessage message = (ObjectMessage) consumer.receive();\n\n\tsession.commit();\n\n\t//TODO something....\n\t//             System.out.println(\"收到消息：\" + arrayToString(message.getBytes(\"count\")));\n\n\tSystem.out.println(\"收到消息：\" + ((SendData) message.getObject()).getDateStr());\n\t}\n\n\tsession.close();\n\tconnection.close();\n}\n\n//    public static final String arrayToString(byte[] bytes)\n//    {\n//        StringBuffer buff = new StringBuffer();\n//        for (int i = 0; i < bytes.length; i++)\n//        {\n//            buff.append(bytes[i] + \" \");\n//        }\n//        return buff.toString();\n//    }\n}\n\n```\n\n##传递参数\n\nimport java.io.Serializable;\nimport java.util.Date;\n\n/**\n * Created with IntelliJ IDEA.\n * User: jason\n * Date: 13-8-22\n * Time: 下午5:21\n * To change this template use File | Settings | File Templates.\n */\npublic class SendData  implements Serializable {\n\n//    private  static  final  long serialVersionUID = -23235245213533L;\n\n    private  byte[] buffer;\n\n    private String dateStr;\n\n    public SendData() {\n        setBuffer(null);\n        setDateStr(null);\n    }\n\n    public byte[] getBuffer() {\n        return buffer;\n    }\n\n    public String getDateStr() {\n        return dateStr;\n    }\n\n    public void setDateStr(String dateStr) {\n        this.dateStr = String.valueOf(new Date().getTime());\n    }\n\n    public void setBuffer(byte[] buffer) {\n        System.out.print(\"begin \\n\");\n        byte [ ] buffers = new byte[1024*1];\n        for (int i=0 ;  i< buffers.length ;i++)\n            buffers[i] = Byte.parseByte(\"2\");\n        System.out.print(\"end \\n\");\n        this.buffer = buffers;\n    }\n\n\n}\n\n","mtime":1377913082000,"source":"_posts/mq5.md","_id":"rrf6xfy3hlunkvti"},{"content":"title: 散文\ndate: 2013-08-08 10:29:16\ntags: 情感 \n---\n##浮华过后，心若沉浮浅笑安然\n生活或许是一件艺术品，需懂得欣赏，意中细品，学会经受。<!--more-->人生似一场追梦，那就是无数个美丽的梦而创造。人生常在繁华中等待，只不过每个人都在等待一个自己想要的未来。人生的迁徙，沉重着你的步履，有些感怀让你沉浸。曾让你迷失了方向，繁华落幕后，空山流水静其身，花开似无情，花落去留意，放眼望去，世间的喜悲离合聚散相依，匆匆如尘埃里的一颗沙粒，生命的深度，靠心去我体悟，生命的宽度，需魅力去赞颂。\n\n浮华沉寂陌生的城市，穿越年华的酸楚，风停了，雨骤了，心倦了，等待与思念的相互侵蚀，生命的前行，梦的边缘，思绪舞动一隅的嗔怨。行走的日光倾城，常伴有风的抚慰，雨的湿浸，山水的同路，莲的独隅，红尘碾转，自断不了纷争，待过忘川时，不过淡似轻风，花开催人老，纵马须恣意，清浅仲夏煮一壶清茶，待坐而品茗，静看花开花落，笑看云卷亦舒。\n\n今夕何夕，尘缘路上的回眸一笑，注定了浅笑安然。流年似水，生命的时光中，因为有缘相识，荒草丛生的原野上，没有早一步，晚一步，这就是缘。夏雨微凉，一袭雨过，岁月氤氲了一帘幽梦，芬芳轻盈着一执而念的光阴，生活缱绻起了风景，流年浮华过后，\"此情可待成追忆，只是当时已惘然\".\n\n心最柔软的地方，穿过了心刺的屏障，曾为一朵玫瑰而绽放，蜿蜒寂寞的藤，月光隐约着浪漫的惆怅，穿越横亘的流浪，时间煮雨，回忆终究会让年华淡泊，活着也许是一种修行，时光静好，品一茗清茶，落花无言，人淡如菊，润一份心境，携一缕阳光，让芳华依旧绽放。字里行间的缠绵，泪痕迭起了四季的轮回，愿得一个人，白守不分离，铺满诗意的路径，夜如此静谧，带伤的诗句常娇嗔着粉饰，步伐太急，却忘了缓缓停下来让心安祥。\n\n山与水的缠绵，任流音乐的浮想，清寂时常敲碎夜的散漫，凄迷的烟雨里，水滴的顺势而滑，水声伴风雨的飘渺芳飞，无垠的夜空，静静的聆听，繁琐打搅，细密的疏雨，意境的恰入，飘散的雨滴，透过肌肤直抵心深处，奈何雨的朦胧，相思成林泪千行。无情的冷风常拔弄着心弦，溅湿的思愁，陌路的不在相见，这个季，风儿依柔，雨儿心醉，满目的寒殇，素色时光的轻狂，喧哗背后的沉静，简单的真谛，心若沉浮，此事不关山与月。\n\n浮华掠影后，静静的听雨，感风的倾诉，世界太喧闹，已至于背离了自己，沉静中的超脱，不常泛滥，无意的碰触，深知心里的冬天时常接伴，甚至盛夏炎炎，那份落韵的雪，也会勾画着伤感的景致。卑微轻触着虚无，平淡晕染着凄冷。如若没有那么多牵扯，也不会有那么多眷念，不用去刻意与深究，这个世界本就复杂，盼一份温暖，守一份静染，只愿在高山流水间吟诵，世间最难识是情，最难诉的是痴。\n\n生命总有尽头，心灵总需要出口，每个人身上都有一把锁，有人说寂寞是种狂欢，但真正的寂寞是无法用热闹来填埋，只有你为心灵找到了决口，上锁的心慢慢绽放，才能真正的释怀，人之所以挣扎与纠结，是把钥匙丢了，但希望总在远方起航心若沉浮，浅笑安然。\n\n\n<!-- ![](http://ww4.sinaimg.cn/large/a43af4ffjw1e3nomotys9j.jpg)-->\n<!-- {% img http://placekitten.com/890/280 %}-->\n{% img right http://ww4.sinaimg.cn/large/a43af4ffjw1e3nomotys9j.jpg 300 400 壮壮 %}\n<!-- {% img right http://placekitten.com/300/500 150 250 Place Kitten #3 %}\n{% img right http://placekitten.com/300/500 150 250 'Place Kitten #4' 'An image of a very cute kitten' %} -->\n\n\n","mtime":1377913082000,"source":"_posts/散文.md","_id":"e51z03jxcjbgozdc"},{"content":"title: New Page\ndate: 2013-08-04 18:24:33\n---\n","mtime":1377913082000,"source":"new-page/index.md","_id":"nfx1zmgdauu1ir9j"}]}