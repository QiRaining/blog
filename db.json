{"posts":{"1":{"id":0,"title":"ios 笔记之 内购","date":"2013-08-21T01:18:13.000Z","updated":"2013-08-21T07:10:16.000Z","categories":[1],"tags":[1],"comments":true,"layout":"post","content":"<blockquote>\n<p>昨晚同事拿了一个app 发现其app 内部页面打开了appstore  并没有唤起手机自带的appstore， 刚开始以为是用webview 加载的\n<a name=\"more\"></a> ，可是自己些了一个demo 发现并不是那样一回事 用webview 加载appstore 地址 会被js 自动吊起本地的appstore，\n下面是我的发给同事的邮件 直接贴下来</p>\n</blockquote>\n<p>我们都绕了弯路 一直以为是用webview 加载的。 我下班做了测试 发现用webview 加载appstore的地址 ，ios 会根据User-Agent 自动判断 唤起本地的app store，其效果跟用[[UIApplicationsharedApplication] openURL:[NSURL URLWithString:@&quot;&quot;]];是一样的。</p>\n<p>后来我尝试改写User-Agent  发现打开的页面是电脑打开的页面一样的 并不是我们通过手机 打开app store 看到的页面。</p>\n<p>后来我看苹果的文档 发现 他们提供了一个类SKStoreProductViewController专门来干这个事情的</p>\n<p><a href=\"https://developer.apple.com/library/ios/documentation/StoreKit/Reference/SKITunesProductViewController_Ref/Introduction/Introduction.html\"><a href=\"https://developer.apple.com/library/ios/documentation/StoreKit/Reference/SKITunesProductViewController_Ref/Introduction/Introduction.html\">https://developer.apple.com/library/ios/documentation/StoreKit/Reference/SKITunesProductViewController_Ref/Introduction/Introduction.html</a></a></p>\n<p>实现效果如下图</p>\n<img src=\"http://ww4.sinaimg.cn/mw690/a43af4ffjw1e7u10xs9nwj20m015c0x9.jpg\" class=\"center\" width=\"250\" height=\"600\">\n\n\n<h2>下面是关键代码</h2>\n<figure class=\"highlight\"><pre>需要引入的\n<span class=\"preprocessor\">#import &lt;StoreKit/StoreKit.h&gt;</span>\n<span class=\"class\"><span class=\"keyword\">delegate</span> 为<span class=\"title\">SKStoreProductViewControllerDelegate</span>\n\n\n调用方式\n    [<span class=\"title\">self</span> <span class=\"title\">openAppWithIdentifier</span>:@\"592043421\"];\n\n\n\n#<span class=\"title\">pragma</span> <span class=\"title\">mark</span> - <span class=\"title\">SKStoreProductViewControllerDelegate</span>\n- (<span class=\"title\">void</span>)<span class=\"title\">productViewControllerDidFinish</span>:(<span class=\"title\">SKStoreProductViewController</span> *)<span class=\"title\">viewController</span> {</span>\n    [viewController dismissViewControllerAnimated:YES completion:^{\n    }];\n}\n\n\n\n\n\n\n- (<span class=\"keyword\">void</span>)openAppWithIdentifier:(NSString *)appId {\n    SKStoreProductViewController *storeProductVC = [[SKStoreProductViewController alloc] init];\n    storeProductVC.<span class=\"class\"><span class=\"keyword\">delegate</span> = <span class=\"title\">self</span>;\n    \n    <span class=\"title\">NSDictionary</span> *<span class=\"title\">dict</span> = [<span class=\"title\">NSDictionary</span> <span class=\"title\">dictionaryWithObject</span>:<span class=\"title\">appId</span> <span class=\"title\">forKey</span>:<span class=\"title\">SKStoreProductParameterITunesItemIdentifier</span>];\n    [<span class=\"title\">storeProductVC</span> <span class=\"title\">loadProductWithParameters</span>:<span class=\"title\">dict</span> <span class=\"title\">completionBlock</span>:^(<span class=\"title\">BOOL</span> <span class=\"title\">result</span>, <span class=\"title\">NSError</span> *<span class=\"title\">error</span>) {</span>\n        if (result) {\n            [self presentViewController:storeProductVC animated:YES completion:nil];\n        }\n    }];\n}\n</pre></figure>\n\n","excerpt":91,"source":"_posts/appstore.md","slug":"appstore","ctime":"2013-08-21T01:18:13.000Z","mtime":"2013-08-21T07:10:16.000Z"},"2":{"id":0,"title":"hexo教程1 如何安装hexo","date":"2013-08-08T06:21:33.000Z","updated":"2013-08-08T07:54:34.000Z","categories":[2],"tags":[1],"comments":true,"layout":"post","content":"<p><a name=\"more\"></a></p>\n<h2>前言</h2>\n<blockquote>\n<p>很早之前就想自己搭建一个博客，但是无奈已没有时间 而没有银子购买服务器，把家里的mac 当做服务器搭建wordpress但是不能保证速度和访问时间。偶然间发现了octopress,于是兴冲冲的折腾起来，最后搭建成功了，废了很大的经历，最主要的原因是还是网络原因，octopress 安装需要下载大量的安装依赖非常繁琐，到处是坑。后来偶然间发现了hexo，发现要比octopress 好用的太多了。于是果断废弃octopress 转头hexo</p>\n</blockquote>\n<hr>\n<h2>概念理解</h2>\n<p>hexo 是基于node.js 的 和rails 差不多。再次使用前 需要安装两个插件</p>\n<ul>\n<li>nvm （版本控制）\nnodejs version manager,可以把它理解为 rails里面的rvm  </li>\n<li>npm （包管理机制 ）\n nodejs package manager,可以把它理解为 rails 里面的bundle </li>\n</ul>\n<hr>\n<h3>安装步骤(mac)</h3>\n<blockquote>\n<p>只针对于mac 其他的请到官网查看相应平台的安装方法<a href=\"http://zespia.tw/hexo\">http://zespia.tw/hexo</a> </p>\n</blockquote>\n<hr>\n<h4>npm</h4>\n<hr>\n<p>打开终端 执行一下命令</p>\n<figure class=\"highlight\"><pre><span class=\"title\">git</span> clone <span class=\"url\">git://github.com/creationix/nvm.git</span> ~/nvm\n</pre></figure>\n\n<p>安装完毕后，在~/.bash_profile或~/.bashrc加入以下内容</p>\n<figure class=\"highlight\"><pre>. ~<span class=\"regexp\">/nvm/</span>nvm.sh`<span class=\"javascript\"></span>\n</pre></figure>\n\n<p>执行</p>\n<figure class=\"highlight\"><pre><span class=\"comment\">source</span> <span class=\"string\">.</span><span class=\"comment\">bash_profile</span> <span class=\"comment\">//或者</span> <span class=\"comment\">source</span> <span class=\"string\">.</span><span class=\"comment\">bashrc\n</pre></figure>\n\n<p>之后即可使用 nvm 来安装 Node.js</p>\n<figure class=\"highlight\"><pre>   nvm install v0<span class=\"number\">.8</span><span class=\"number\">.14</span>\n   nvm <span class=\"keyword\">use</span> v0<span class=\"number\">.8</span><span class=\"number\">.14</span>\n   nvm <span class=\"keyword\">alias</span> <span class=\"keyword\">default</span> v0<span class=\"number\">.8</span><span class=\"number\">.14</span>\n</pre></figure>\n\n<hr>\n<h4>hexo</h4>\n<p>安装</p>\n<figure class=\"highlight\"><pre><span class=\"title\">npm</span> install -g hexo\n</pre></figure>\n\n<p>更新</p>\n<figure class=\"highlight\"><pre>npm <span class=\"operator\"><span class=\"keyword\">update</span> -g\n</pre></figure>\n\n<hr>\n<h3>设定</h3>\n<p>编辑 _config.yml</p>\n<p>下面贴出我的配置 大家自行根据各自的配置进行相应修改</p>\n<pre><code><figure class=\"highlight\"><pre>// <span class=\"class\">Site</span>\n<span class=\"method\">title:</span> 阿峰的技术窝窝\n<span class=\"method\">subtitle:</span> 专注于移动互联网\n<span class=\"method\">description:</span> <span class=\"class\">C</span>/<span class=\"class\">C</span>++/<span class=\"class\">Linux</span>/嵌入式/<span class=\"class\">IOS</span>/<span class=\"class\">WEB</span>/\n<span class=\"method\">author:</span> <span class=\"class\">Jason</span> <span class=\"class\">Hu</span>\n<span class=\"method\">email:</span> hufeng@hufengvip.cn\n<span class=\"method\">language:</span> zh-<span class=\"class\">CN</span>\n\n// <span class=\"class\">URL</span>\n// <span class=\"class\">If</span> your site is put in a subdirectory, set url as <span class=\"string\">'http://yoursite.com/child'</span> and root as <span class=\"string\">'/child/'</span>\n<span class=\"method\">url:</span> <span class=\"method\">http:</span>//hufeng825.github.com\n<span class=\"method\">root:</span> /\n<span class=\"method\">permalink:</span> :year/:month/:day/:title/\n<span class=\"method\">tag_dir:</span> tags\n<span class=\"method\">archive_dir:</span> archives\n<span class=\"method\">category_dir:</span> categories\n<span class=\"method\">code_dir:</span> downloads/code\n\n// <span class=\"class\">Writing</span>\n<span class=\"method\">new_post_name:</span> :title.md # <span class=\"class\">File</span> name of new posts\n<span class=\"method\">default_layout:</span> post\n<span class=\"method\">auto_spacing:</span> <span class=\"keyword\">false</span> # <span class=\"class\">Add</span> spaces between asian characters and western characters\n<span class=\"method\">titlecase:</span> <span class=\"keyword\">false</span> # <span class=\"class\">Transform</span> title into titlecase\n<span class=\"method\">max_open_file:</span> <span class=\"number\">100</span>\n<span class=\"method\">filename_case:</span> <span class=\"number\">0</span>\n<span class=\"method\">highlight:</span>\n  <span class=\"method\">enable:</span> <span class=\"keyword\">true</span>\n  <span class=\"method\">line_number:</span> <span class=\"keyword\">true</span>\n  <span class=\"method\">tab_replace:</span>\n\n// <span class=\"class\">Category</span> &amp; <span class=\"class\">Tag</span>\n<span class=\"method\">default_category:</span> <span class=\"class\">IOS</span>\n<span class=\"method\">category_map:</span>\n<span class=\"method\">tag_map:</span>\n\n// <span class=\"class\">Archives</span>\n// <span class=\"number\">2</span>: <span class=\"class\">Enable</span> pagination\n// <span class=\"number\">1</span>: <span class=\"class\">Disable</span> pagination\n// <span class=\"number\">0</span>: <span class=\"class\">Fully</span> <span class=\"class\">Disable</span>\n<span class=\"method\">archive:</span> <span class=\"number\">2</span>\n<span class=\"method\">category:</span> <span class=\"number\">2</span>\n<span class=\"method\">tag:</span> <span class=\"number\">2</span>\n\n// <span class=\"class\">Server</span>\n// <span class=\"class\">Hexo</span> uses <span class=\"class\">Connect</span> as a server\n// <span class=\"class\">You</span> can customize the logger format as defined in\n// <span class=\"method\">http:</span>//www.senchalabs.org/connect/logger.html\n<span class=\"method\">port:</span> <span class=\"number\">4000</span>\n<span class=\"method\">logger:</span> <span class=\"keyword\">false</span>\n<span class=\"method\">logger_format:</span>\n\n// <span class=\"class\">Date</span> / <span class=\"class\">Time</span> format\n// <span class=\"class\">Hexo</span> uses <span class=\"class\">Moment</span>.js to parse and display date\n// <span class=\"class\">You</span> can customize the date format as defined in\n// <span class=\"method\">http:</span>//momentjs.com/docs/#/displaying/format/\n<span class=\"method\">date_format:</span> <span class=\"class\">YYYY</span> <span class=\"class\">MMM</span> <span class=\"class\">D</span>\n<span class=\"method\">time_format:</span> <span class=\"class\">H</span>:<span class=\"method\">mm:</span>ss\n\n// <span class=\"class\">Pagination</span>\n// <span class=\"class\">Set</span> per_page to <span class=\"number\">0</span> to disable pagination\n<span class=\"method\">per_page:</span> <span class=\"number\">10</span>\n<span class=\"method\">pagination_dir:</span> page\n\n// <span class=\"class\">Disqus</span>\n<span class=\"method\">disqus_shortname:</span>\n\n// <span class=\"class\">Extensions</span>\n// <span class=\"class\">Plugins</span>: <span class=\"method\">https:</span>//github.com/tommy351/hexo/wiki/<span class=\"class\">Plugins</span>\n// <span class=\"class\">Themes</span>: <span class=\"method\">https:</span>//github.com/tommy351/hexo/wiki/<span class=\"class\">Themes</span>\n\n<span class=\"method\">plugins:</span>\n- hexo-generator-sitemap\n\n\n<span class=\"method\">theme:</span> bootstrap\n<span class=\"method\">exclude_generator:</span>\n\n// <span class=\"class\">Deployment</span>\n// <span class=\"class\">Docs</span>: <span class=\"method\">http:</span>//zespia.tw/hexo/docs/deploy.html\n<span class=\"method\">deploy:</span> \n  <span class=\"method\">type:</span> github\n  <span class=\"method\">repository:</span> <span class=\"method\">https:</span>//github.com/hufeng825/hufeng825.github.io.git\n  <span class=\"method\">branch:</span> master\n</pre></figure></code></pre>\n","excerpt":3,"source":"_posts/hexo1.md","slug":"hexo1","ctime":"2013-08-08T07:46:32.000Z","mtime":"2013-08-08T07:54:34.000Z"},"3":{"id":0,"title":"hibernate 笔记之 基础概念和配置","date":"2013-08-14T07:56:58.000Z","updated":"2013-08-15T04:25:27.000Z","categories":[3],"tags":[1],"comments":true,"layout":"post","content":"<h2>ORM 概念</h2>\n<blockquote>\n<p>ORM 解决主要的问题是对象-- 关系映射， 域模型是面向对象的，而关系模型数据是面向关系的，一般情况下，一个持久化类和一个表对应，类的每个实例对应表中的一条记录。</p>\n</blockquote>\n<a name=\"more\"></a>\n\n<h3>对象的持久化</h3>\n<p>• 狭义的理解,“持久化”仅仅指把对象永久保存到数据库中</p>\n<p>• 广义的理解,“持久化”包括和数据库相关的各种操作:</p>\n<ul>\n<li><p>保存:把对象永久保存到数据库中。</p>\n</li>\n<li><p>更新:更新数据库中对象(记录)的状态。</p>\n</li>\n<li><p>删除:从数据库中删除一个对象。</p>\n</li>\n<li><p>查询:根据特定的查询条件,把符合查询条件的一个或多个对象从数据 库加载到内存中。</p>\n</li>\n<li><p>加载:根据特定的OID,把一个对象从数据库加载到内 </p>\n<blockquote>\n<p>&#39; OID ---&gt;为了在系统中能够找到所需对象,需要为每一个对象分配一个唯一的标识号。 在关系数据库中称之为主键,而在对象术语中,则叫做对象标识(Object identifier-OID). &#39;</p>\n</blockquote>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>标号</th>\n<th>面向对象概念</th>\n<th>面向关系概念 </th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>1</em></td>\n<td><code>对象</code></td>\n<td><strong>表的行（即记录）</strong></td>\n</tr>\n<tr>\n<td>2</td>\n<td>属性</td>\n<td>表的列（即字段）</td>\n</tr>\n</tbody>\n</table>\n<h2>注意事项</h2>\n<ol>\n<li>有一个无参的构造器  反射时需要</li>\n<li>类不能声明为final  如果声明就不能实现延迟加载了</li>\n</ol>\n<h2>hibernate 配置文件</h2>\n<blockquote>\n<p>hibernate.cfg.xml</p>\n</blockquote>\n<figure class=\"highlight\"><pre><span class=\"tag\">&lt;<span class=\"title\">hibernate-configuration</span>&gt;</span>\n\t<span class=\"tag\">&lt;<span class=\"title\">session-factory</span>&gt;</span>\n\t\t<span class=\"comment\">&lt;!-- 数据连接相关的配置 --&gt;</span>\n\t\t<span class=\"tag\">&lt;<span class=\"title\">property</span> <span class=\"attribute\">name</span>=<span class=\"value\">\"hibernate.connection.driver_class\"</span>&gt;</span>com.mysql.jdbc.Driver<span class=\"tag\">&lt;/<span class=\"title\">property</span>&gt;</span>\n\t\t<span class=\"tag\">&lt;<span class=\"title\">property</span> <span class=\"attribute\">name</span>=<span class=\"value\">\"hibernate.connection.url\"</span>&gt;</span>jdbc:mysql://localhost:3306/test<span class=\"tag\">&lt;/<span class=\"title\">property</span>&gt;</span>\n\t\t<span class=\"tag\">&lt;<span class=\"title\">property</span> <span class=\"attribute\">name</span>=<span class=\"value\">\"hibernate.connection.username\"</span>&gt;</span>root<span class=\"tag\">&lt;/<span class=\"title\">property</span>&gt;</span>\t\t\t\n\t\t<span class=\"tag\">&lt;<span class=\"title\">property</span> <span class=\"attribute\">name</span>=<span class=\"value\">\"hibernate.connection.password\"</span>&gt;</span>1234<span class=\"tag\">&lt;/<span class=\"title\">property</span>&gt;</span>\n\t\t\t\n\t\t<span class=\"comment\">&lt;!-- 执行操作时显示SQL语句 --&gt;</span>\n\t\t<span class=\"tag\">&lt;<span class=\"title\">property</span> <span class=\"attribute\">name</span>=<span class=\"value\">\"show_sql\"</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"title\">property</span>&gt;</span>\n\n\t\t<span class=\"comment\">&lt;!-- 格式化输出的SQL语句 --&gt;</span>\n\t\t<span class=\"tag\">&lt;<span class=\"title\">property</span> <span class=\"attribute\">name</span>=<span class=\"value\">\"format_sql\"</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"title\">property</span>&gt;</span>\n\t\t\n\t\t<span class=\"comment\">&lt;!-- 配置数据库方言 --&gt;</span>\n\t\t<span class=\"tag\">&lt;<span class=\"title\">property</span> <span class=\"attribute\">name</span>=<span class=\"value\">\"hibernate.dialect\"</span>&gt;</span>org.hibernate.dialect.MySQLDialect<span class=\"tag\">&lt;/<span class=\"title\">property</span>&gt;</span>\t\n\t\t<span class=\"tag\">&lt;<span class=\"title\">property</span> <span class=\"attribute\">name</span>=<span class=\"value\">\"hibernate.hbm2ddl.auto\"</span>&gt;</span>update<span class=\"tag\">&lt;/<span class=\"title\">property</span>&gt;</span>\n\t\t\t\n\t\t<span class=\"comment\">&lt;!-- 配置映射文件 --&gt;</span>\t\t\t\n\t\t<span class=\"tag\">&lt;<span class=\"title\">mapping</span> <span class=\"attribute\">resource</span>=<span class=\"value\">\"com/vince/entity/User.hbm.xml\"</span>/&gt;</span>\t\n\t\t<span class=\"tag\">&lt;/<span class=\"title\">session-factory</span>&gt;</span>\t\n<span class=\"tag\">&lt;/<span class=\"title\">hibernate-configuration</span>&gt;</span>\n</pre></figure>\n\n<p>hbm2ddl.auto:该属性可帮助程序员实现正向工程, 即由 java 代码生成数据库脚本, 进而生成具体的表结构. 。取值 create | update | create-drop | validate</p>\n<p>– create : 会根据 .hbm.xml 文件来生成数据表, 但是每次运行都会删 除上一次的表 ,重新生成表, 哪怕二次没有任何改变</p>\n<p>– create-drop:会根据.hbm.xml文件生成表,但是SessionFactory一关 闭, 表就自动删除</p>\n<p>– update:最常用的属性值,也会根据.hbm.xml文件生成表,但 若 .hbm.xml 文件和数据库中对应的数据表的表结构不同, Hiberante 将更新数据表结构,但不会删除已有的行和列</p>\n<p>– validate : 会和数据库中的表进行比较, 若 .hbm.xml 文件中的列在数 据表中不存在,则抛出异常</p>\n<ul>\n<li>format_sql:是否将 SQL 转化为格式良好的 SQL . 取值 true | false</li>\n</ul>\n<hr>\n<h2>hibernate 映射文件</h2>\n<blockquote>\n<p>User.hbm.xml</p>\n</blockquote>\n<figure class=\"highlight\"><pre><span class=\"pi\">&lt;?xml version=\"1.0\"?&gt;</span>\n<span class=\"doctype\">&lt;!DOCTYPE hibernate-mapping PUBLIC\n\t\"-//Hibernate/Hibernate Mapping DTD 3.0//EN\"\n\t\"http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd\"&gt;</span>\n\n<span class=\"tag\">&lt;<span class=\"title\">hibernate-mapping</span> <span class=\"attribute\">package</span>=<span class=\"value\">\"com.vince.entity\"</span>&gt;</span>\n\t<span class=\"tag\">&lt;<span class=\"title\">class</span> <span class=\"attribute\">name</span>=<span class=\"value\">\"User\"</span> <span class=\"attribute\">table</span>=<span class=\"value\">\"USER_TABLE\"</span> <span class=\"attribute\">dynamic-update</span>=<span class=\"value\">\"true\"</span> <span class=\"attribute\">dynamic-insert</span>=<span class=\"value\">\"true\"</span>&gt;</span>\n\t\t<span class=\"comment\">&lt;!-- 配置主键 --&gt;</span>\n\t\t<span class=\"tag\">&lt;<span class=\"title\">id</span> <span class=\"attribute\">name</span>=<span class=\"value\">\"id\"</span> <span class=\"attribute\">column</span>=<span class=\"value\">\"ID\"</span>&gt;</span>\n\t\t\t<span class=\"comment\">&lt;!-- native表示使用本地数据库生成主键的方式 --&gt;</span>\n\t\t\t<span class=\"tag\">&lt;<span class=\"title\">generator</span> <span class=\"attribute\">class</span>=<span class=\"value\">\"native\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"title\">generator</span>&gt;</span>\n\t\t<span class=\"tag\">&lt;/<span class=\"title\">id</span>&gt;</span>\n\t\t<span class=\"comment\">&lt;!-- 其它属性的配置 --&gt;</span>\n\t\t<span class=\"tag\">&lt;<span class=\"title\">property</span> <span class=\"attribute\">name</span>=<span class=\"value\">\"name\"</span> <span class=\"attribute\">column</span>=<span class=\"value\">\"NAME\"</span> <span class=\"attribute\">not-null</span>=<span class=\"value\">\"true\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"title\">property</span>&gt;</span>\n\t\t<span class=\"tag\">&lt;<span class=\"title\">property</span> <span class=\"attribute\">name</span>=<span class=\"value\">\"age\"</span> <span class=\"attribute\">column</span>=<span class=\"value\">\"AGE\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"title\">property</span>&gt;</span>\n\t\t<span class=\"tag\">&lt;<span class=\"title\">property</span> <span class=\"attribute\">name</span>=<span class=\"value\">\"createDate\"</span> <span class=\"attribute\">column</span>=<span class=\"value\">\"CREATE_DATE\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"title\">property</span>&gt;</span>\n\t<span class=\"tag\">&lt;/<span class=\"title\">class</span>&gt;</span>\n\n<span class=\"tag\">&lt;/<span class=\"title\">hibernate-mapping</span>&gt;</span>\n\n\n-------\n\n<span class=\"tag\">&lt;<span class=\"title\">hibernate-mapping</span> <span class=\"attribute\">package</span>=<span class=\"value\">\"com.vince.entity\"</span>&gt;</span>\n\t<span class=\"tag\">&lt;<span class=\"title\">class</span> <span class=\"attribute\">name</span>=<span class=\"value\">\"Emp\"</span> <span class=\"attribute\">table</span>=<span class=\"value\">\"EMP\"</span> <span class=\"attribute\">dynamic-insert</span>=<span class=\"value\">\"true\"</span>\n\t\t<span class=\"attribute\">dynamic-update</span>=<span class=\"value\">\"true\"</span>&gt;</span>\n\t\t<span class=\"tag\">&lt;<span class=\"title\">id</span> <span class=\"attribute\">name</span>=<span class=\"value\">\"id\"</span> <span class=\"attribute\">type</span>=<span class=\"value\">\"int\"</span>&gt;</span>\n\t\t\t<span class=\"tag\">&lt;<span class=\"title\">column</span> <span class=\"attribute\">name</span>=<span class=\"value\">\"ID\"</span> /&gt;</span>\n\t\t\t<span class=\"tag\">&lt;<span class=\"title\">generator</span> <span class=\"attribute\">class</span>=<span class=\"value\">\"native\"</span> /&gt;</span>\n\t\t<span class=\"tag\">&lt;/<span class=\"title\">id</span>&gt;</span>\n\t\t<span class=\"tag\">&lt;<span class=\"title\">property</span> <span class=\"attribute\">name</span>=<span class=\"value\">\"name\"</span> <span class=\"attribute\">type</span>=<span class=\"value\">\"java.lang.String\"</span>&gt;</span>\n\t\t\t<span class=\"tag\">&lt;<span class=\"title\">column</span> <span class=\"attribute\">name</span>=<span class=\"value\">\"NAME\"</span> /&gt;</span>\n\t\t<span class=\"tag\">&lt;/<span class=\"title\">property</span>&gt;</span>\n\t\t<span class=\"tag\">&lt;<span class=\"title\">property</span> <span class=\"attribute\">name</span>=<span class=\"value\">\"salary\"</span> <span class=\"attribute\">type</span>=<span class=\"value\">\"float\"</span>&gt;</span>\n\t\t\t<span class=\"tag\">&lt;<span class=\"title\">column</span> <span class=\"attribute\">name</span>=<span class=\"value\">\"SALARY\"</span> /&gt;</span>\n\t\t<span class=\"tag\">&lt;/<span class=\"title\">property</span>&gt;</span>\n\t\t<span class=\"tag\">&lt;<span class=\"title\">property</span> <span class=\"attribute\">name</span>=<span class=\"value\">\"age\"</span> <span class=\"attribute\">type</span>=<span class=\"value\">\"int\"</span>&gt;</span>\n\t\t\t<span class=\"tag\">&lt;<span class=\"title\">column</span> <span class=\"attribute\">name</span>=<span class=\"value\">\"AGE\"</span> /&gt;</span>\n\t\t<span class=\"tag\">&lt;/<span class=\"title\">property</span>&gt;</span>\n\t<span class=\"tag\">&lt;/<span class=\"title\">class</span>&gt;</span>\n<span class=\"tag\">&lt;/<span class=\"title\">hibernate-mapping</span>&gt;</span>\n</pre></figure>\n\n<h3>主键生成策略</h3>\n<img src=\"http://ww2.sinaimg.cn/mw690/a43af4ffjw1e7n5a834npj20x00lajw6.jpg\n\" class=\"center\" title=\"hiberate 主键生成策略\">\n\n\n<hr>\n<h2>SessionFactory 接口</h2>\n<p>• 针对单个数据库映射关系经过编译后的内存镜像,是线程安 全的。</p>\n<p>• Configuration 对象根据当前的配置信息生成 SessionFactory 对象。SessionFactory 对象一旦构造完毕,即被赋予特定的 配置信息</p>\n<ul>\n<li><p>Configuration cfg = new Configuration().configure();</p>\n</li>\n<li><p>SessionFactory sf = cfg.buildSessionFactory();</p>\n</li>\n</ul>\n<p>• SessionFactory是生成Session的工厂:</p>\n<ul>\n<li>Session session = sf.openSession();</li>\n</ul>\n<p>• 构造 SessionFactory 很消耗资源</p>\n<h2>hibernate.hbm2ddl.auto</h2>\n<ol>\n<li>create-drop   每次启动重新创建 结束后删除</li>\n<li>create 每次启动都重新创建</li>\n<li>update 不一样就更新</li>\n<li>validate 仅仅验证</li>\n</ol>\n<h2>如何使用</h2>\n<h3>使用范例</h3>\n<figure class=\"highlight\"><pre><span class=\"package\"><span class=\"keyword\">package</span> <span class=\"title\">hufeng</span>.<span class=\"title\">test</span> ;\n\n<span class=\"title\">import</span> <span class=\"title\">org</span>.<span class=\"title\">hibernate</span>.<span class=\"title\">Session</span> ;\n<span class=\"title\">import</span> <span class=\"title\">org</span>.<span class=\"title\">hibernate</span>.<span class=\"title\">SessionFactory</span> ;\n<span class=\"title\">import</span> <span class=\"title\">org</span>.<span class=\"title\">hibernate</span>.<span class=\"title\">cfg</span>.<span class=\"title\">Configuration</span> ;\n\n<span class=\"title\">public</span> <span class=\"title\">class</span>  <span class=\"title\">Test</span>{</span>\n\tpublick <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> main(String[] args){\n\t<span class=\"comment\">// 加载hibernate 配置文件 （默认加载classpath 下的hibernate.cfg.xml）</span>\n\tConfiguration cfg = <span class=\"keyword\">new</span> Configuration().config();\n\t\n\t<span class=\"comment\">// 通过Configulation 对象创建SessionFactory 工厂</span>\n\tSessionFactory factory = cfg.buildSessionFactory();\n \t\n \t<span class=\"comment\">//Session操作数据库的一次会话</span>\n \t<span class=\"comment\">//线程不安全</span>\n \tSession session = factory.openSession();\n\n\n \t<span class=\"comment\">//开启事务 --&gt; 把很多操作组合成一个整体 让事物具有原子性</span>\n \tTransaction tx =  session.beginTransation();\n\n\n \tCustomUser user = <span class=\"keyword\">new</span> CustomUser(<span class=\"string\">\"jason\"</span>,<span class=\"number\">20</span>,<span class=\"keyword\">new</span> Date());\n\n \t<span class=\"comment\">//保存数据</span>\n \tsession.save(user);\n\n \t<span class=\"comment\">//提交事物</span>\n \ttx.commit();\n\n \t<span class=\"comment\">//关闭</span>\n \tsession.close();\n \tfactory.close();\n }\n}\n</pre></figure>\n\n<h3>创建Hibernate 工具类</h3>\n<figure class=\"highlight\"><pre><span class=\"keyword\">public</span> final <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"id\">HibernateUtil</span>{</span>\n\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> SessionFactory sessionFactory;\n\t<span class=\"keyword\">private</span> HibernateUtil(){}\n\n\t<span class=\"keyword\">static</span> {\n\t\tConfiguration cfg  = new Configuration()<span class=\"variable\">.configure</span>();\n\t\tsessionFactory = cfg<span class=\"variable\">.buildSessionFactory</span>();\n\t}\n\n\t <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> SessionFactory  getSesstionFactory()\n\t {\n\t \t<span class=\"keyword\">return</span> sessionFactory;\n\t }\n\n\t <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Session getSession()\n\t {\n\t \t<span class=\"keyword\">return</span> sessionFactory<span class=\"variable\">.openSession</span>();\n\t }\n\n\t <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> save(Object obj)\n\t {\n\t \tSession session = getSession();\n\t \tTransaction tx = session<span class=\"variable\">.benginTransaction</span>();\n\t \tsession<span class=\"variable\">.save</span>(obj);\n\t \tsession<span class=\"variable\">.evict</span>(obj);<span class=\"comment\">//把对象清理出esssion 避免批处理时session中的缓存过多 导致内存溢出</span>\n\t \t<span class=\"comment\">//session.clear()；清楚session中所有的对象</span>\n\t \ttx<span class=\"variable\">.commit</span>();\n\t \tsession<span class=\"variable\">.close</span>();\n\t }\n}\n</pre></figure>\n\n<h3>应用工具类后的代码</h3>\n<figure class=\"highlight\"><pre><span class=\"package\"><span class=\"keyword\">package</span> <span class=\"title\">hufeng</span>.<span class=\"title\">test</span> ;\n\n<span class=\"title\">import</span> <span class=\"title\">org</span>.<span class=\"title\">hibernate</span>.<span class=\"title\">Session</span> ;\n<span class=\"title\">import</span> <span class=\"title\">org</span>.<span class=\"title\">hibernate</span>.<span class=\"title\">SessionFactory</span> ;\n<span class=\"title\">import</span> <span class=\"title\">org</span>.<span class=\"title\">hibernate</span>.<span class=\"title\">cfg</span>.<span class=\"title\">Configuration</span> ;\n<span class=\"title\">import</span> <span class=\"title\">org</span>.<span class=\"title\">util</span>.<span class=\"title\">HibernateUtil</span>;\n\n<span class=\"title\">public</span> <span class=\"title\">class</span> <span class=\"title\">Test</span> {</span>\n\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> save()\n\t{\n\t\tUser user =<span class=\"keyword\">new</span> User(<span class=\"string\">\"jack\"</span>,<span class=\"number\">22</span>,<span class=\"keyword\">new</span> Date()));\n\t\tHibernateUtil.save(user);\n\t}\n}\n\npublick <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> main(String[] args)\n{\n\tsave();\n}\n</pre></figure>\n\n<h3>更加规范应用HQL的代码</h3>\n<figure class=\"highlight\"><pre>public final class HibernateUtil {\n\n\tprivate static SessionFactory sessionFactory<span class=\"comment\">;</span>\n\n\tprivate HibernateUtil() {\n\t}\n\n\tstatic {\n\t\tConfiguration cfg = new Configuration()<span class=\"preprocessor\">.configure</span>()<span class=\"comment\">;</span>\n\t\tsessionFactory = cfg<span class=\"preprocessor\">.buildSessionFactory</span>()<span class=\"comment\">;</span>\n\t}\n\n\tpublic static SessionFactory getSessionFactory() {\n\t\treturn sessionFactory<span class=\"comment\">;</span>\n\t}\n\n\tpublic static Session getSession() {\n\t\treturn sessionFactory<span class=\"preprocessor\">.openSession</span>()<span class=\"comment\">;</span>\n\t}\n\n\tpublic static void save(Object obj) {\n\t\tSession session = null<span class=\"comment\">;</span>\n\t\ttry {\n\t\t\tsession = getSession()<span class=\"comment\">;</span>\n\t\t\tTransaction tx = session<span class=\"preprocessor\">.beginTransaction</span>()<span class=\"comment\">;</span>\n\t\t\tsession<span class=\"preprocessor\">.save</span>(obj)<span class=\"comment\">;</span>\n\t\t\ttx<span class=\"preprocessor\">.commit</span>()<span class=\"comment\">;</span>\n\t\t} catch (HibernateException e) {\n\t\t\te<span class=\"preprocessor\">.printStackTrace</span>()<span class=\"comment\">;</span>\n\t\t} finally {\n\t\t\tsession<span class=\"preprocessor\">.close</span>()<span class=\"comment\">;</span>\n\t\t}\n\t}\n\tpublic static void update(Object obj) {\n\t\tSession session = null<span class=\"comment\">;</span>\n\t\ttry {\n\t\t\tsession = getSession()<span class=\"comment\">;</span>\n\t\t\tTransaction tx = session<span class=\"preprocessor\">.beginTransaction</span>()<span class=\"comment\">;</span>\n\t\t\tsession<span class=\"preprocessor\">.update</span>(obj)<span class=\"comment\">;</span>\n\t\t\ttx<span class=\"preprocessor\">.commit</span>()<span class=\"comment\">;</span>\n\t\t} catch (HibernateException e) {\n\t\t\te<span class=\"preprocessor\">.printStackTrace</span>()<span class=\"comment\">;</span>\n\t\t} finally {\n\t\t\tsession<span class=\"preprocessor\">.close</span>()<span class=\"comment\">;</span>\n\t\t}\n\t}\n\t\n\tpublic static void delete(Object obj) {\n\t\tSession session = null<span class=\"comment\">;</span>\n\t\ttry {\n\t\t\tsession = getSession()<span class=\"comment\">;</span>\n\t\t\tTransaction tx = session<span class=\"preprocessor\">.beginTransaction</span>()<span class=\"comment\">;</span>\n\t\t\tsession<span class=\"preprocessor\">.delete</span>(obj)<span class=\"comment\">;</span>\n\t\t\ttx<span class=\"preprocessor\">.commit</span>()<span class=\"comment\">;</span>\n\t\t} catch (HibernateException e) {\n\t\t\te<span class=\"preprocessor\">.printStackTrace</span>()<span class=\"comment\">;</span>\n\t\t} finally {\n\t\t\tsession<span class=\"preprocessor\">.close</span>()<span class=\"comment\">;</span>\n\t\t}\n\t}\n\t\n\tpublic static Object get(Class clazz,Serializable id) {\n\t\tSession session = null<span class=\"comment\">;</span>\n\t\ttry {\n\t\t\tsession = getSession()<span class=\"comment\">;</span>\n\t\t\treturn session<span class=\"preprocessor\">.get</span>(clazz, id)<span class=\"comment\">;</span>\n\t\t} catch (HibernateException e) {\n\t\t\te<span class=\"preprocessor\">.printStackTrace</span>()<span class=\"comment\">;</span>\n\t\t} finally {\n\t\t\tsession<span class=\"preprocessor\">.close</span>()<span class=\"comment\">;</span>\n\t\t}\n\t\treturn null<span class=\"comment\">;</span>\n\t}\n\n}\n\n--------\n@Override\n\tpublic List&lt;Emp&gt; list() throws Exception {\n\t\tSession session  = HibernateUtil<span class=\"preprocessor\">.getSession</span>()<span class=\"comment\">;</span>\n\t\t//hql针对对象查询语句\n\t\tString hql = <span class=\"string\">\"from Emp\"</span><span class=\"comment\">;//</span>\n\t\t//创建查询(hql)\n\t\tQuery query = session<span class=\"preprocessor\">.createQuery</span>(hql)<span class=\"comment\">;</span>\n\t\tList&lt;Emp&gt; list = query<span class=\"preprocessor\">.list</span>()<span class=\"comment\">;</span>\n\t\tsession<span class=\"preprocessor\">.close</span>()<span class=\"comment\">;</span>\n\t\treturn list<span class=\"comment\">;</span>\n\t}\n\n\t@Override\n\tpublic void <span class=\"keyword\">add</span>(Emp emp) throws Exception {\n\t\tHibernateUtil<span class=\"preprocessor\">.save</span>(emp)<span class=\"comment\">;</span>\n\t\t\n\t}\n\n\t@Override\n\tpublic List&lt;Emp&gt; listByName(String name) throws Exception {\n\t\tSession session  = HibernateUtil<span class=\"preprocessor\">.getSession</span>()<span class=\"comment\">;</span>\n\t\tString hql = <span class=\"string\">\"from Emp e where e.name=?\"</span><span class=\"comment\">;</span>\n\t\tQuery query = session<span class=\"preprocessor\">.createQuery</span>(hql)<span class=\"comment\">;</span>\n\t\t//sql ？起始位置从<span class=\"number\">1</span>开始\n\t\t//hql ？起始位置从<span class=\"number\">0</span>开始\n\t\tquery<span class=\"preprocessor\">.setString</span>(<span class=\"number\">0</span>, name)<span class=\"comment\">;</span>\n\t\t\n\t\tList&lt;Emp&gt; list = query<span class=\"preprocessor\">.list</span>()<span class=\"comment\">;</span>\n\t\tsession<span class=\"preprocessor\">.close</span>()<span class=\"comment\">;</span>\n\t\treturn list<span class=\"comment\">;</span>\n\t}\n\n\t@Override\n\tpublic List&lt;Emp&gt; listByAge(int age) throws Exception {\n\t\t\n\t\t\n\t\treturn null<span class=\"comment\">;</span>\n\t}\n\n\t//使用别名代替?方式，可以不用考虑设置参数的顺序\n\t@Override\n\tpublic List&lt;Emp&gt; listByNameAge(String name, int age) throws Exception {\n\t\tSession session = HibernateUtil<span class=\"preprocessor\">.getSession</span>()<span class=\"comment\">;</span>\n\t\tString hql = <span class=\"string\">\"from Emp e where e.age=:age and e.name=:name\"</span><span class=\"comment\">;</span>\n\t\tQuery query = session<span class=\"preprocessor\">.createQuery</span>(hql)<span class=\"comment\">;</span>\n//\t\tquery<span class=\"preprocessor\">.setString</span>(<span class=\"number\">0</span>, name)<span class=\"comment\">;</span>\n//\t\tquery<span class=\"preprocessor\">.setInteger</span>(<span class=\"number\">1</span>, age)<span class=\"comment\">;</span>\n\t\tquery<span class=\"preprocessor\">.setString</span>(<span class=\"string\">\"name\"</span>, name)<span class=\"comment\">;</span>\n\t\tquery<span class=\"preprocessor\">.setInteger</span>(<span class=\"string\">\"age\"</span>, age)<span class=\"comment\">;</span>\n\t\t\n\t\t//对分页的支持\n\t\tquery<span class=\"preprocessor\">.setFirstResult</span>(<span class=\"number\">0</span>)<span class=\"comment\">;//设置查询的起始位置</span>\n\t\tquery<span class=\"preprocessor\">.setMaxResults</span>(<span class=\"number\">1</span>)<span class=\"comment\">;//设置每页的记录数</span>\n\t\t\n\t\t\n\t\tList&lt;Emp&gt; emps = query<span class=\"preprocessor\">.list</span>()<span class=\"comment\">;</span>\n\t\t\n\t\t\n\t\t\n\t\t//iterate查询会执行 N+<span class=\"number\">1</span>条语句\n//\t\tIterator&lt;Emp&gt; emps = query<span class=\"preprocessor\">.iterate</span>()<span class=\"comment\">;</span>\n\t\t\n\t\tsession<span class=\"preprocessor\">.close</span>()<span class=\"comment\">;</span>\n\t\treturn emps<span class=\"comment\">;</span>\n\t}\n\n\t@Override\n\tpublic List&lt;Emp&gt; listLikeName(String name) {\n\t\tSession session = HibernateUtil<span class=\"preprocessor\">.getSession</span>()<span class=\"comment\">;</span>\n\t\tString hql = <span class=\"string\">\"from Emp e where e.name like :name\"</span><span class=\"comment\">;</span>\n\t\tQuery query = session<span class=\"preprocessor\">.createQuery</span>(hql)<span class=\"comment\">;</span>\n\t\tquery<span class=\"preprocessor\">.setString</span>(<span class=\"string\">\"name\"</span>, <span class=\"string\">\"%\"</span>+name+<span class=\"string\">\"%\"</span>)<span class=\"comment\">;</span>\n\t\tList&lt;Emp&gt; list = query<span class=\"preprocessor\">.list</span>()<span class=\"comment\">;</span>\n\t\tsession<span class=\"preprocessor\">.close</span>()<span class=\"comment\">;</span>\n\t\treturn list<span class=\"comment\">;</span>\n\t}\n\n\t@Override\n\tpublic Emp getByName(String name) {\n\t\tString hql = <span class=\"string\">\"from Emp e where e.name=:name\"</span><span class=\"comment\">;</span>\n\t\tSession session = HibernateUtil<span class=\"preprocessor\">.getSession</span>()<span class=\"comment\">;</span>\n\t\tQuery query = session<span class=\"preprocessor\">.createQuery</span>(hql)<span class=\"comment\">;</span>\n\t\tquery<span class=\"preprocessor\">.setString</span>(<span class=\"string\">\"name\"</span>, name)<span class=\"comment\">;</span>\n\t\t//返回唯一的结果\n\t\tEmp emp = (Emp)query<span class=\"preprocessor\">.uniqueResult</span>()<span class=\"comment\">;</span>\n\t\tsession<span class=\"preprocessor\">.close</span>()<span class=\"comment\">;</span>\n\t\treturn emp<span class=\"comment\">;</span>\n\t}\n\n\t//QBC检索方式(了解)\n\t@Override\n\tpublic Emp getById(int id) {\n\t\t\n\t\tSession session = HibernateUtil<span class=\"preprocessor\">.getSession</span>()<span class=\"comment\">;</span>\n\t\tCriteria criteria = session<span class=\"preprocessor\">.createCriteria</span>(Emp<span class=\"preprocessor\">.class</span>)<span class=\"comment\">;</span>\n\t\t//添加查询条件\n\t\tcriteria<span class=\"preprocessor\">.add</span>(Restrictions<span class=\"preprocessor\">.eq</span>(<span class=\"string\">\"id\"</span>, id))<span class=\"comment\">;</span>\n\t\tEmp emp = (Emp)criteria<span class=\"preprocessor\">.uniqueResult</span>()<span class=\"comment\">;</span>\n\t\tsession<span class=\"preprocessor\">.close</span>()<span class=\"comment\">;</span>\n\t\treturn emp<span class=\"comment\">;</span>\n\t}\n\n\t@Override\n\tpublic long countEmp() {\n\t\tString hql = <span class=\"string\">\"select count(id) as id from Emp\"</span><span class=\"comment\">;</span>\n\t\tSession session = HibernateUtil<span class=\"preprocessor\">.getSession</span>()<span class=\"comment\">;</span>\n\t\tQuery query = session<span class=\"preprocessor\">.createQuery</span>(hql)<span class=\"comment\">;</span>\n\t\tlong count = (long)query<span class=\"preprocessor\">.uniqueResult</span>()<span class=\"comment\">;</span>\n\t\tsession<span class=\"preprocessor\">.close</span>()<span class=\"comment\">;</span>\n\t\treturn count<span class=\"comment\">;</span>\n\t}\n\tpublic void countEmp2() {\n\t\tString hql = <span class=\"string\">\"select count(id),avg(age) as id from Emp\"</span><span class=\"comment\">;</span>\n\t\tSession session = HibernateUtil<span class=\"preprocessor\">.getSession</span>()<span class=\"comment\">;</span>\n\t\tQuery query = session<span class=\"preprocessor\">.createQuery</span>(hql)<span class=\"comment\">;</span>\n\t\tList list = query<span class=\"preprocessor\">.list</span>()<span class=\"comment\">;</span>\n\t\tObject[] objs = (Object[])list<span class=\"preprocessor\">.get</span>(<span class=\"number\">0</span>)<span class=\"comment\">;</span>\n\t\tint count = (int)objs[<span class=\"number\">0</span>]<span class=\"comment\">;</span>\n\t\tint avg = (int)objs[<span class=\"number\">1</span>]<span class=\"comment\">;</span>\n\t\tsession<span class=\"preprocessor\">.close</span>()<span class=\"comment\">;</span>\n\t}\n</pre></figure>\n\n","excerpt":133,"source":"_posts/hibernate0.md","slug":"hibernate0","ctime":"2013-08-14T07:56:58.000Z","mtime":"2013-08-15T04:25:27.000Z"},"4":{"id":0,"title":"hibernate 笔记之 session","date":"2013-08-14T02:36:16.000Z","updated":"2013-08-15T03:06:02.000Z","categories":[3],"tags":[1],"comments":true,"layout":"post","content":"<h2>session 的概述</h2>\n<a name=\"more\"></a>\n\n<ol>\n<li><p>session 接口是hibernate 向应用程序提供操作数据库最主要的接口，他提供了基本的保存，更新，删除和加载java对象的方法</p>\n</li>\n<li><p>session 具有一个缓存对象，位于缓存中的对象成为持久化对象，它和数据库中的相关记录对应，session能够在某些时间点，按照缓存中的对象变化来执行相关的sql语句。来同步更新数据库，这一过程被称为清理缓存</p>\n</li>\n<li><p>站在持久化的角度，hibernate 把对象分成四种状态：持久化状态，临界状态，游流状态 删除状态 session的特定方法能使对象从一个状态转换成另一个状态</p>\n</li>\n</ol>\n<hr>\n<h2>Session 接口</h2>\n<p>Session 是应用程序与数据库之间交互操作的一个单线程对象,是 Hibernate 运作的中心,所有持久化对象必须在 session 的管理下才可以进 行持久化操作。此对象的生命周期很短。Session 对象有一个一级缓存,显 式执行 flush 之前,所有的持久层操作的数据都缓存在 session 对象处。相 当于 JDBC 中的 Connection。</p>\n<p>• 持久化类与 Session 关联起来后就具有了持久化的能力。</p>\n<p>• Session 类的方法:</p>\n<ul>\n<li><p>取得持久化对象的方法: get() load()</p>\n</li>\n<li><p>持久化对象都得保存,更新和删除: save(),update(),saveOrUpdate(),delete()</p>\n</li>\n<li><p>开启事务: beginTransaction().</p>\n</li>\n<li><p>管理 Session 的方法:isOpen(),flush(), clear(), evict(), close()等</p>\n</li>\n</ul>\n<figure class=\"highlight\"><pre>import java<span class=\"preprocessor\">.util</span><span class=\"preprocessor\">.Date</span><span class=\"comment\">;</span>\nimport java<span class=\"preprocessor\">.util</span><span class=\"preprocessor\">.UUID</span><span class=\"comment\">;</span>\n\nimport org<span class=\"preprocessor\">.hibernate</span><span class=\"preprocessor\">.Hibernate</span><span class=\"comment\">;</span>\nimport org<span class=\"preprocessor\">.hibernate</span><span class=\"preprocessor\">.Session</span><span class=\"comment\">;</span>\nimport org<span class=\"preprocessor\">.hibernate</span><span class=\"preprocessor\">.Transaction</span><span class=\"comment\">;</span>\n\nimport <span class=\"keyword\">com</span><span class=\"preprocessor\">.vince</span><span class=\"preprocessor\">.entity</span><span class=\"preprocessor\">.User</span><span class=\"comment\">;</span>\nimport <span class=\"keyword\">com</span><span class=\"preprocessor\">.vince</span><span class=\"preprocessor\">.util</span><span class=\"preprocessor\">.HibernateUtil</span><span class=\"comment\">;</span>\n\n\npublic class Test {\n\t\n\t\n\tpublic static void evict(){\n\t\t\n\t\tSession session = HibernateUtil<span class=\"preprocessor\">.getSession</span>()<span class=\"comment\">;</span>\n\t\tTransaction tx = session<span class=\"preprocessor\">.beginTransaction</span>()<span class=\"comment\">;</span>\n\t\t\n\t\tUser user = new User(<span class=\"string\">\"test-7\"</span>,<span class=\"number\">17</span>,new Date())<span class=\"comment\">;</span>\n\t\tsession<span class=\"preprocessor\">.save</span>(user)<span class=\"comment\">;</span>\n\t\t\n\t\tsession<span class=\"preprocessor\">.evict</span>(user)<span class=\"comment\">;//把对象从session中清除,在批量处理时，避免session中缓存的对象太多，会导致内存溢出</span>\n//\t\tsession<span class=\"preprocessor\">.clear</span>()<span class=\"comment\">;//清除session中所有的缓存对象</span>\n\t\tUser user2 = (User)session<span class=\"preprocessor\">.load</span>(User<span class=\"preprocessor\">.class</span>, user<span class=\"preprocessor\">.getId</span>())<span class=\"comment\">;</span>\n\t\tSystem<span class=\"preprocessor\">.out</span><span class=\"preprocessor\">.println</span>(user2)<span class=\"comment\">;</span>\n\t\t\n\t\ttx<span class=\"preprocessor\">.commit</span>()<span class=\"comment\">;</span>\n\t\tsession<span class=\"preprocessor\">.close</span>()<span class=\"comment\">;</span>\n\t}\n\t\n\t\n\t\n\t<span class=\"comment\">/**\n\t * merge方法：合并,保存或更新\n\t * \n\t * \n\t */</span>\n\tpublic static void merge(){\n\t\tSession session = HibernateUtil<span class=\"preprocessor\">.getSession</span>()<span class=\"comment\">;</span>\n\t\tTransaction tx = session<span class=\"preprocessor\">.beginTransaction</span>()<span class=\"comment\">;</span>\n\t\t\n\t\t//情况一：临时对象(新创建的对象)\n\t\t//<span class=\"number\">1</span>)user1 的状态是瞬时对象时，创建一个新的对象user2,把user1对象的属性拷贝到新建的user2对象中,持久化这个user2对象,执行insert语句\n//\t\tUser user1 = new User()<span class=\"comment\">;</span>\n//\t\tuser1<span class=\"preprocessor\">.setAge</span>(<span class=\"number\">22</span>)<span class=\"comment\">;</span>\n//\t\tuser1<span class=\"preprocessor\">.setName</span>(<span class=\"string\">\"test--3\"</span>)<span class=\"comment\">;</span>\n//\t\tuser1<span class=\"preprocessor\">.setCreateDate</span>(new Date())<span class=\"comment\">;</span>\n//\t\t\n//\t\t\n//\t\tUser user2 = (User)session<span class=\"preprocessor\">.merge</span>(user1)<span class=\"comment\">;</span>\n//\t\t\n//\t\tSystem<span class=\"preprocessor\">.out</span><span class=\"preprocessor\">.println</span>(user1==user2)<span class=\"comment\">;</span>\n\t\t\n\t\t//情况二：user1 的状态是游离对象时，Session缓存中是否存在ID为与user1相同的持久化对象\n\t\t//(<span class=\"number\">1</span>)如果有\n//\t\tUser user2 = (User)session<span class=\"preprocessor\">.load</span>(User<span class=\"preprocessor\">.class</span>, <span class=\"number\">1</span>)<span class=\"comment\">;</span>\n//\t\tUser user1 = new User()<span class=\"comment\">;</span>\n//\t\tuser1<span class=\"preprocessor\">.setAge</span>(<span class=\"number\">20</span>)<span class=\"comment\">;</span>\n//\t\tuser1<span class=\"preprocessor\">.setCreateDate</span>(new Date())<span class=\"comment\">;</span>\n//\t\tuser1<span class=\"preprocessor\">.setId</span>(<span class=\"number\">1</span>)<span class=\"comment\">;</span>\n//\t\tuser1<span class=\"preprocessor\">.setName</span>(<span class=\"string\">\"test---4\"</span>)<span class=\"comment\">;</span>\n//\t\tsession<span class=\"preprocessor\">.merge</span>(user1)<span class=\"comment\">;</span>\n\t\t\n\t\t\n\t\t\n\t\t//情况三：如果session中不存在该对象，那么去数据库中查询是否存在该ID的记录，\n\t\t//如果存在，那么就加载这条记录到session中(user2)，比较两个对象属性是否一致，\n\t\t//如果不一致，就把user1的属性拷贝到user2中，执行update语句\n\t\t//如果一致，就不执行任何操作\n//\t\tUser user1 = new User()<span class=\"comment\">;</span>\n//\t\tuser1<span class=\"preprocessor\">.setAge</span>(<span class=\"number\">22</span>)<span class=\"comment\">;</span>\n////\t\tuser1<span class=\"preprocessor\">.setCreateDate</span>(new Date())<span class=\"comment\">;</span>\n//\t\tuser1<span class=\"preprocessor\">.setId</span>(<span class=\"number\">5</span>)<span class=\"comment\">;</span>\n//\t\tuser1<span class=\"preprocessor\">.setName</span>(<span class=\"string\">\"aaa\"</span>)<span class=\"comment\">;</span>\n//\t\tsession<span class=\"preprocessor\">.merge</span>(user1)<span class=\"comment\">;</span>\n\t\t\n\t\t//情况四：如果session中不存在该对象，那么去数据库中查询是否存在该ID的记录，\n\t\t//如果不存在，创建一个新的对象user2,把user1对象的属性拷贝到新建的user2对象中,\n\t\t//持久化这个user2对象,执行insert语句\n\t\tUser user1 = new User()<span class=\"comment\">;</span>\n\t\tuser1<span class=\"preprocessor\">.setAge</span>(<span class=\"number\">22</span>)<span class=\"comment\">;</span>\n\t\tuser1<span class=\"preprocessor\">.setCreateDate</span>(new Date())<span class=\"comment\">;</span>\n\t\tuser1<span class=\"preprocessor\">.setId</span>(<span class=\"number\">6</span>)<span class=\"comment\">;</span>\n\t\tuser1<span class=\"preprocessor\">.setName</span>(<span class=\"string\">\"bbb\"</span>)<span class=\"comment\">;</span>\n\t\tUser user2 = (User)session<span class=\"preprocessor\">.merge</span>(user1)<span class=\"comment\">;</span>\n\t\t\n\t\t\n\t\ttx<span class=\"preprocessor\">.commit</span>()<span class=\"comment\">;</span>\n\t\tsession<span class=\"preprocessor\">.close</span>()<span class=\"comment\">;</span>\n\t\t\n\t}\n\t\n\t<span class=\"comment\">/**\n\t * saveOrUpdate 方法：执行保存或更新\n\t * 1、如果实体对象是临时状态（没有ID），那么该方法将执行保存操作\n\t * 2、如果实体对象是游离状态（有ID），那么该方法以将执行更新操作\n\t * \t如果数据库不存在该ID，那么更新将抛出异常\n\t * 3、判断ID是否为空（整型ID 0 空），根据映射文件中的unsaved-value\n\t * \t属性值来判断\n\t */</span>\n\tpublic static void saveOrUpdate(){\n\t\tSession session = HibernateUtil<span class=\"preprocessor\">.getSession</span>()<span class=\"comment\">;</span>\n\t\tTransaction tx = session<span class=\"preprocessor\">.beginTransaction</span>()<span class=\"comment\">;</span>\n\t\t\n\t\tUser user = new User()<span class=\"comment\">;</span>\n\t\tuser<span class=\"preprocessor\">.setAge</span>(<span class=\"number\">21</span>)<span class=\"comment\">;</span>\n\t\tuser<span class=\"preprocessor\">.setName</span>(<span class=\"string\">\"test--1\"</span>)<span class=\"comment\">;</span>\n\t\tuser<span class=\"preprocessor\">.setCreateDate</span>(new Date())<span class=\"comment\">;</span>\n\t\tuser<span class=\"preprocessor\">.setId</span>(<span class=\"number\">3</span>)<span class=\"comment\">;</span>\n\t\t\n\t\tsession<span class=\"preprocessor\">.saveOrUpdate</span>(user)<span class=\"comment\">;</span>\n\t\t\n\t\ttx<span class=\"preprocessor\">.commit</span>()<span class=\"comment\">;</span>\n\t\tsession<span class=\"preprocessor\">.close</span>()<span class=\"comment\">;</span>\n\t}\n\t\n\t\n\tpublic static void delete(){\n\t\tSession session = HibernateUtil<span class=\"preprocessor\">.getSession</span>()<span class=\"comment\">;</span>\n\t\tTransaction tx = session<span class=\"preprocessor\">.beginTransaction</span>()<span class=\"comment\">;</span>\n\t\t\n//\t\tUser user = new User()<span class=\"comment\">;</span>\n//\t\tuser<span class=\"preprocessor\">.setId</span>(<span class=\"number\">6</span>)<span class=\"comment\">;</span>\n//\t\tuser<span class=\"preprocessor\">.setName</span>(<span class=\"string\">\"xxx\"</span>)<span class=\"comment\">;</span>\n\t\t\n\t\tUser user = (User)session<span class=\"preprocessor\">.load</span>(User<span class=\"preprocessor\">.class</span>, <span class=\"number\">3</span>)<span class=\"comment\">;</span>\n\t\t\n\t\tsession<span class=\"preprocessor\">.delete</span>(user)<span class=\"comment\">;</span>\n\t\t\n\t\tSystem<span class=\"preprocessor\">.out</span><span class=\"preprocessor\">.println</span>(user<span class=\"preprocessor\">.getId</span>())<span class=\"comment\">;</span>\n\t\t\n\t\ttx<span class=\"preprocessor\">.commit</span>()<span class=\"comment\">;</span>\n\t\tsession<span class=\"preprocessor\">.close</span>()<span class=\"comment\">;</span>\n\t}\n\t\n\t<span class=\"comment\">/**\n\t * 更新对象:通过update方法\n\t * 1、如果数据库中不存在ID的记录，抛出异常\n\t * 2、默认生成的SQL语句会根据ID为条件更新所有字段，\n\t * 如果只更新发生变化的字段，那么在映射文件的class配置中添加 dynamic-update=true\n\t * \n\t */</span>\n\tpublic static void update2(){\n\t\tSession session = HibernateUtil<span class=\"preprocessor\">.getSession</span>()<span class=\"comment\">;</span>\n\t\tTransaction tx = session<span class=\"preprocessor\">.beginTransaction</span>()<span class=\"comment\">;</span>\n\t\t\n//\t\tUser user = new User(<span class=\"string\">\"Tom-1\"</span>,<span class=\"number\">23</span>,new Date())<span class=\"comment\">;</span>\n\t\tUser user = (User)session<span class=\"preprocessor\">.get</span>(User<span class=\"preprocessor\">.class</span>, <span class=\"number\">1</span>)<span class=\"comment\">;</span>\n\t\t\n\t\tuser<span class=\"preprocessor\">.setName</span>(<span class=\"string\">\"888\"</span>)<span class=\"comment\">;</span>\n\t\tsession<span class=\"preprocessor\">.update</span>(user)<span class=\"comment\">;</span>\n\t\t\n\t\ttx<span class=\"preprocessor\">.commit</span>()<span class=\"comment\">;</span>\n\t\tsession<span class=\"preprocessor\">.close</span>()<span class=\"comment\">;</span>\n\t}\n\t<span class=\"comment\">/**\n\t * 更新对象\n\t * 通过session 的脏数据机制\n\t */</span>\n\tpublic static void update1(){\n\t\tSession session = HibernateUtil<span class=\"preprocessor\">.getSession</span>()<span class=\"comment\">;</span>\n\t\tTransaction tx = session<span class=\"preprocessor\">.beginTransaction</span>()<span class=\"comment\">;</span>\n\t\tUser user = (User)session<span class=\"preprocessor\">.load</span>(User<span class=\"preprocessor\">.class</span>, <span class=\"number\">1</span>)<span class=\"comment\">;</span>\n\t\tuser<span class=\"preprocessor\">.setName</span>(<span class=\"string\">\"xxx\"</span>)<span class=\"comment\">;</span>\n\t\ttx<span class=\"preprocessor\">.commit</span>()<span class=\"comment\">;</span>\n\t\tsession<span class=\"preprocessor\">.close</span>()<span class=\"comment\">;</span>\n\t}\n\t\n\t<span class=\"comment\">/**\n\t * load方法：\n\t * 1、如果数据库不存在记录，那么将抛出异常\n\t * 2、load方法先执行延迟加载，返回代理对象，在真正使用到该对象时才会\n\t * 从数据库中查询\n\t * 3、初始化代理对象的方法：\n\t * （1）调用代理对象的非主键属性\n\t * （2）Hibernate.initialize()方法初始化代理对象\n\t */</span>\n\tpublic static User load(){\n\t\tSession session = HibernateUtil<span class=\"preprocessor\">.getSession</span>()<span class=\"comment\">;</span>\n\t\tTransaction tx = session<span class=\"preprocessor\">.beginTransaction</span>()<span class=\"comment\">;</span>\n\t\tUser user = (User)session<span class=\"preprocessor\">.load</span>(User<span class=\"preprocessor\">.class</span>, <span class=\"number\">5</span>)<span class=\"comment\">;</span>\n\t\t\n//\t\tSystem<span class=\"preprocessor\">.out</span><span class=\"preprocessor\">.println</span>(user<span class=\"preprocessor\">.getName</span>())<span class=\"comment\">;</span>\n\t\tHibernate<span class=\"preprocessor\">.initialize</span>(user)<span class=\"comment\">;//初始化代理对象</span>\n\t\ttx<span class=\"preprocessor\">.commit</span>()<span class=\"comment\">;</span>\n\t\tsession<span class=\"preprocessor\">.close</span>()<span class=\"comment\">;</span>\n\t\t\n\t\treturn user<span class=\"comment\">;</span>\n\t}\n\t\n\t<span class=\"comment\">/**\n\t * get方法：\n\t * 1、立即从数据库中查询数据\n\t * 2、如果数据库不存在记录，那么将返回null\n\t */</span>\n\tpublic static void get(){\n\t\tSession session = HibernateUtil<span class=\"preprocessor\">.getSession</span>()<span class=\"comment\">;</span>\n\t\tTransaction tx = session<span class=\"preprocessor\">.beginTransaction</span>()<span class=\"comment\">;</span>\n\t\tClass c = User<span class=\"preprocessor\">.class</span><span class=\"comment\">;</span>\n\t\tUser user = (User)session<span class=\"preprocessor\">.get</span>(c, <span class=\"number\">1</span>)<span class=\"comment\">;</span>\n\t\tif(user!=null){\n\t\t//修改时间\n\t\tuser<span class=\"preprocessor\">.setCreateDate</span>(new Date())<span class=\"comment\">;</span>\n\t\t}\n\t\tSystem<span class=\"preprocessor\">.out</span><span class=\"preprocessor\">.println</span>(user)<span class=\"comment\">;</span>\n\t\t\n//\t\tsession<span class=\"preprocessor\">.flush</span>()<span class=\"comment\">;//刷新缓冲</span>\n\t\ttx<span class=\"preprocessor\">.commit</span>()<span class=\"comment\">;</span>\n\t\tsession<span class=\"preprocessor\">.close</span>()<span class=\"comment\">;</span>\n\t}\n\t\n\t<span class=\"comment\">/**\n\t * save()方法以会立即为持久化对象设置主键，所有在任何时候会执行insert语句\n\t * persist()，如果在事务内部那么与save()一样，如果在事务外部，不会立即执行\n\t * insert语句\n\t */</span>\n\tpublic static void save(){\n//\t\tUser user = new User(<span class=\"string\">\"jack\"</span>,<span class=\"number\">22</span>,new Date())<span class=\"comment\">;</span>\n\t\tUser user = new User()<span class=\"comment\">;</span>\n\t\tuser<span class=\"preprocessor\">.setName</span>(<span class=\"string\">\"jack\"</span>)<span class=\"comment\">;</span>\n\t\tSession session = HibernateUtil<span class=\"preprocessor\">.getSession</span>()<span class=\"comment\">;</span>\n//\t\tTransaction tx = session<span class=\"preprocessor\">.beginTransaction</span>()<span class=\"comment\">;</span>\n\t\tsession<span class=\"preprocessor\">.save</span>(user)<span class=\"comment\">;</span>\n//\t\tsession<span class=\"preprocessor\">.persist</span>(user)<span class=\"comment\">;</span>\n\t\t\n//\t\ttx<span class=\"preprocessor\">.commit</span>()<span class=\"comment\">;</span>\n\t\t\n\t\tsession<span class=\"preprocessor\">.close</span>()<span class=\"comment\">;</span>\n\t\t\n\t}\n\n\tpublic static void main(String[] args) {\n//\t\tsave()<span class=\"comment\">;</span>\n//\t\tget()<span class=\"comment\">;</span>\n//\t\tUser user = load()<span class=\"comment\">;</span>\n//\t\tSystem<span class=\"preprocessor\">.out</span><span class=\"preprocessor\">.println</span>(user)<span class=\"comment\">;</span>\n\t\t\n//\t\tupdate1()<span class=\"comment\">;</span>\n//\t\tupdate2()<span class=\"comment\">;</span>\n\t\t\n//\t\tdelete()<span class=\"comment\">;</span>\n//\t\tsaveOrUpdate()<span class=\"comment\">;</span>\n//\t\tmerge()<span class=\"comment\">;</span>\n//\t\tevict()<span class=\"comment\">;</span>\n\t\t\n//\t\tSystem<span class=\"preprocessor\">.out</span><span class=\"preprocessor\">.println</span>(UUID<span class=\"preprocessor\">.randomUUID</span>()<span class=\"preprocessor\">.toString</span>())<span class=\"comment\">;</span>\n\t}\n\n}\n</pre></figure>\n\n","excerpt":21,"source":"_posts/hibernate1.md","slug":"hibernate1","ctime":"2013-08-15T03:05:09.000Z","mtime":"2013-08-15T03:06:02.000Z"},"5":{"id":0,"title":"","date":"2013-08-15T01:45:01.000Z","updated":"2013-08-15T02:20:14.000Z","categories":[],"tags":[],"comments":true,"layout":"post","content":"<p>title: hibernate 笔记之 \ndate: 2013-08-15 09:45:01\ntags: [技术]\ncategories: hibernate</p>\n","excerpt":0,"source":"_posts/hibernate3.md","slug":"hibernate3","ctime":"2013-08-15T01:45:01.000Z","mtime":"2013-08-15T02:20:14.000Z"},"6":{"id":0,"title":"ios 开发笔记之图片 Image","date":"2013-08-20T01:29:39.000Z","updated":"2013-08-20T01:35:08.000Z","categories":[1],"tags":[1],"comments":true,"layout":"post","content":"<h2>关于图片资源</h2>\n<p>ios 程序会把图片资源编译成二进制文件，程序运行时会把这些图片从磁盘加载直接到内存，如果图片很大，加载速度就会很慢。\n<a name=\"more\"></a>\n为了优化提高性能，需要尽量压缩图片资源。（ps 苹果公司的UIKit 开发者Andy Matuschak指出：使用resizable image是最快的方法。）</p>\n<h2>关于图片资源的压缩</h2>\n<p>如果不需要用半透明的图片 则尽量不要用png 格式的图片。相应的可以用jpg格式的。另外谷歌最新推出的一种格式webp</p>\n<h3>1 WebP是什么</h3>\n<p>WebP是Google推出的一种同时提供了有损压缩与无损压缩的图片格式。目前互联网上传输的数据有65%都是图片，WebP就是出于减少数据量、加速网络传输的目的而开发的。WebP希望能够达到和JPEG同水平的图片质量，但是更小的文件，以减少图片的传送时间。\n在有损压缩的状况下，WebP比同样画质的JPEG少了25% ～ 34%的文件大小 。而在无损压缩的情形中，比起用libpng产生的PNG图片，WebP少了34%的文件大小，也比用pngout再处理过的PNG图片少了26%的文件大小。</p>\n<h3>2 WebP的使用</h3>\n<p>webp图片压缩率会比jpeg、png更高，因此下载图片会更省流量，特别适合在mobile app上使用。 比如iOS app上，可以把webp编译生成framework，然后加入引用就可以是使用了。强烈推荐。\n这iOS解析时，可以直接使用 WebPImage。\nNSData <em>imageData = [NSData dataWithContentsOfURL:url];\nUIImage </em>tmpImage = [[WebPImage alloc] loadWebPFromData:imageData];\nSDWebImage最近也提供了对webp的支持，起先不支持自己写了一个分类，现在可以直接用他的UIImage+WebP</p>\n<h2>关于加载方式</h2>\n<p>  imageNamed每次都读图片到缓存中，只适合频繁使用的图片，\ninitWithContentsOfFile的方法加载图片后，不缓存，适合加载不常使用的图片。 \n引导图片一般情况下只会启动一次而且图片也一般情况下比较大所以用imageNamed 会非常， 如果用initWithContentsOfFile:，这些图片所占用内存可以很快被释放</p>\n<blockquote>\n<p>资料参考by wufawei stackoverflow</p>\n</blockquote>\n","excerpt":79,"source":"_posts/iosimage.md","slug":"iosimage","ctime":"2013-08-20T01:29:39.000Z","mtime":"2013-08-20T01:35:08.000Z"},"7":{"id":0,"title":"Markdown","date":"2013-08-14T08:13:21.000Z","updated":"2013-08-21T08:45:16.000Z","categories":[2],"tags":[1],"comments":true,"layout":"post","content":"<p>本文简单介绍下 Markdown 语法\n<a name=\"more\"></a></p>\n<h3>什么是Markdown</h3>\n<p>Markdown是一个将文本转化为HTML的工具。简单来说，Markdown是一个兼顾可读性与易用性的轻量级标记体系。Markdown并不追求大而全，它只关心HTML里最常用的几个标记，对于一些不常用的标记它允许直接将HTML标记插入文本。</p>\n<hr>\n<h2>表格</h2>\n<table>\n<thead>\n<tr>\n<th>标号</th>\n<th>面向对象概念</th>\n<th>面向关系概念 </th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>1</em></td>\n<td><code>对象</code></td>\n<td><strong>表的行（即记录）</strong></td>\n</tr>\n<tr>\n<td>2</td>\n<td>属性</td>\n<td>表的列（即字段）</td>\n</tr>\n</tbody>\n</table>\n<p>代码如下</p>\n<figure class=\"highlight\"><pre><span class=\"comment\">标号</span>  <span class=\"comment\">|</span> <span class=\"comment\">面向对象概念</span> <span class=\"comment\">|</span> <span class=\"comment\">面向关系概念</span> \n<span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span> <span class=\"comment\">|</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span> <span class=\"comment\">|</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span>\n<span class=\"comment\">*1*</span> <span class=\"comment\">|</span> <span class=\"comment\">`对象`</span> <span class=\"comment\">|</span> <span class=\"comment\">**表的行（即记录）**</span>\n<span class=\"comment\">2</span> <span class=\"comment\">|</span> <span class=\"comment\">属性</span> <span class=\"comment\">|</span> <span class=\"comment\">表的列（即字段）\n</pre></figure>\n\n<hr>\n<h2>标题</h2>\n<p>Markdown提供了两种方式（Setext和Atx）来显示标题。</p>\n<p>代码如下</p>\n<figure class=\"highlight\"><pre><span class=\"comment\">Setext方式</span>\n<span class=\"comment\">标题1</span>\n<span class=\"comment\">=================</span>\n\n<span class=\"comment\">标题2</span>\n<span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"literal\">-</span>\n\n<span class=\"comment\">Atx方式</span>\n<span class=\"comment\">#</span> <span class=\"comment\">标题1</span>\n<span class=\"comment\">##</span> <span class=\"comment\">标题2</span>\n<span class=\"comment\">######</span> <span class=\"comment\">标题6\n</pre></figure>\n\n<hr>\n<h2>换行</h2>\n<p>在文字的末尾使用两个或两个以上的空格来表示换行。</p>\n<p>代码如下</p>\n<figure class=\"highlight\"><pre><span class=\"blockquote\">&gt; 这是一个引用，</span>\n<span class=\"blockquote\">&gt; 这里木有换行，   </span>\n<span class=\"blockquote\">&gt; 在这里换行了。</span>\n<span class=\"blockquote\">&gt; &gt; 内部嵌套</span>\n</pre></figure>\n\n<hr>\n<h2>列表</h2>\n<h3>无序列表使用*、+或-后面加上空格来表示。</h3>\n<p>代码如下 </p>\n<figure class=\"highlight\"><pre><span class=\"bullet\">* </span>Item 1\n<span class=\"bullet\">* </span>Item 2\n<span class=\"bullet\">* </span>Item 3\n\n<span class=\"bullet\">+ </span>Item 1\n<span class=\"bullet\">+ </span>Item 2\n<span class=\"bullet\">+ </span>Item 3\n\n<span class=\"bullet\">- </span>Item 1\n<span class=\"bullet\">- </span>Item 2\n<span class=\"bullet\">- </span>Item 3\n</pre></figure>\n\n<h3>有序列表使用数字加英文句号加空格表示。</h3>\n<p>代码如下 </p>\n<figure class=\"highlight\"><pre><span class=\"bullet\">1. </span>Item 1\n<span class=\"bullet\">2. </span>Item 2\n<span class=\"bullet\">3. </span>Item 3\n</pre></figure>\n\n<hr>\n<h2>代码区域</h2>\n<p>行内代码使用反斜杠`表示。 \n代码段落则是在每行文字前加4个空格或者1个缩进符表示。</p>\n<hr>\n<h2>强调</h2>\n<p>Markdown使用*或_表示强调。</p>\n<p>代码如下 </p>\n<figure class=\"highlight\"><pre>\n单星号 = <span class=\"emphasis\">*斜体*</span>\n单下划线 = <span class=\"emphasis\">_斜体_</span>\n双星号 = <span class=\"strong\">**加粗**</span>\n双下划线 = <span class=\"strong\">__加粗__</span>\n</pre></figure>\n\n<p>链接</p>\n<p>Markdown支持两种风格的链接：Inline和Reference。</p>\n<p>语法：</p>\n<p>Inline：以中括号标记显示的链接文本，后面紧跟用小括号包围的链接。如果链接有title属性，则在链接中使用空格加“title属性”。\nReference：一般应用于多个不同位置使用相同链接。通常分为两个部分，调用部分为[链接文本][ref]；定义部分可以出现在文本中的其他位置，格式为[ref]: <a href=\"http://some/link/address\">http://some/link/address</a> (可选的标题)。 \n注：ref中不区分大小写。</p>\n<p>代码如下 </p>\n<figure class=\"highlight\"><pre>\n这是一个Inline[示例](http:<span class=\"comment\">//www.baidu.com \"可选的title\")。</span>\n这是一个Reference[示例][<span class=\"keyword\">ref</span>]。\n[<span class=\"keyword\">ref</span>]: http:<span class=\"comment\">//www.baidu.com</span>\n</pre></figure>\n\n<hr>\n<h2>图片</h2>\n<p>图片的使用方法基本上和链接类似，只是在中括号前加叹号。 \n注：Markdown不能设置图片大小，如果必须设置则应使用HTML标记<img>。</p>\n<p>代码如下 </p>\n<figure class=\"highlight\"><pre><span class=\"tag\">&lt;<span class=\"title\">notextile</span>&gt;</span>0<span class=\"tag\">&lt;/<span class=\"title\">notextile</span>&gt;</span>\n\nInline示例：![替代文本](http://ww4.sinaimg.cn/large/a43af4ffjw1e3nomotys9j.jpg \"可选的title\")\nReference示例：![替代文本][pic]\n[pic]: http://ww4.sinaimg.cn/large/a43af4ffjw1e3nomotys9j.jpg \"可选的title\"\nHTML示例：<span class=\"tag\">&lt;<span class=\"title\">img</span> <span class=\"attribute\">src</span>=<span class=\"value\">\"http://ww4.sinaimg.cn/large/a43af4ffjw1e3nomotys9j.jpg\"</span> <span class=\"attribute\">alt</span>=<span class=\"value\">\"替代文本\"</span> <span class=\"attribute\">title</span>=<span class=\"value\">\"标题文本\"</span> <span class=\"attribute\">width</span>=<span class=\"value\">\"200\"</span> /&gt;</span>\n</pre></figure>\n\n<p>效果</p>\n<img src=\"http://ww4.sinaimg.cn/large/a43af4ffjw1e3nomotys9j.jpg\" class=\"right\" width=\"300\" height=\"400\" title=\"可选的title\">\n\n<p>Inline示例：<img src=\"http://ww4.sinaimg.cn/large/a43af4ffjw1e3nomotys9j.jpg\" alt=\"替代文本\" title=\"可选的title\">\nReference示例：![替代文本][<a href=\"http://ww4.sinaimg.cn/large/a43af4ffjw1e3nomotys9j.jpg\">http://ww4.sinaimg.cn/large/a43af4ffjw1e3nomotys9j.jpg</a>]</p>\n<p>HTML示例：<img src=\"http://ww4.sinaimg.cn/large/a43af4ffjw1e3nomotys9j.jpg\" alt=\"替代文本\" title=\"标题文本\" width=\"200\" /></p>\n<hr>\n<h2>自动链接</h2>\n<p>使用尖括号，可以为输入的URL或者邮箱自动创建链接。如test@test.com。</p>\n<h2>分隔线</h2>\n<p>在一行中使用三个或三个以上的*、-或_可以添加分隔线，其中可以有空白，但是不能有其他字符。</p>\n<h2>转义字符</h2>\n<p>Markdown中的转义字符为\\，可以转义的有：</p>\n<figure class=\"highlight\"><pre><span class=\"command\">\\\\</span> 反斜杠\n<span class=\"command\">\\`</span> 反引号\n<span class=\"command\">\\*</span> 星号\n<span class=\"command\">\\_</span> 下划线\n<span class=\"command\">\\{</span><span class=\"command\">\\}</span> 大括号\n<span class=\"command\">\\[</span><span class=\"command\">\\]</span> 中括号\n<span class=\"command\">\\(</span><span class=\"command\">\\)</span> 小括号\n<span class=\"command\">\\#</span> 井号\n<span class=\"command\">\\+</span> 加号\n<span class=\"command\">\\-</span> 减号\n<span class=\"command\">\\.</span> 英文句号\n<span class=\"command\">\\!</span> 感叹号\n</pre></figure>\n\n","excerpt":23,"source":"_posts/markdown.md","slug":"markdown","ctime":"2013-08-14T08:13:21.000Z","mtime":"2013-08-21T08:45:16.000Z"},"8":{"id":0,"title":"工作四年多了","date":"2013-08-08T09:16:03.000Z","updated":"2013-08-21T01:47:10.000Z","categories":[4],"tags":[2],"comments":true,"layout":"post","content":"<h2>工作好几年了 谈谈自己的一些感想吧</h2>\n<p>最近几件事情触动挺大的，\n<a name=\"more\"></a></p>\n<p>1：跟侯的差距越来越远了， 不到三年 侯做到了很多我没做到的事情1-)自考了北大计算机系 2-)结识了年薪几十万的漂亮嫂子 3-）拿到了驾照 4-）在燕郊买了房子</p>\n<p>虽然彼此间还是隔三差五的聚聚，但是间隔越来越长了，大家都在忙，而我是真的在瞎忙 忙的没有任何意义。</p>\n<p>2：家里的压力，家里的压力从催着找女朋友结婚 到现在的赶紧攒首付买房子，之前很天真的甚至有些自私的想 不结婚不要孩子，可是现在觉得真的很对不起两个老人的</p>\n<p>3：同事和朋友，现在还记得几年前 sally姐说的那句话 同事永远成不了朋友。 有一次跟周妈谈起旺哥为什么不喜欢带新人，周妈谈了一口气说 旺旺是被现在这个社会伤的太深了了。虽然不太清楚在旺哥身上发生过什么 但是 回想这几年发生在自己身上的事情 也能体会的到写。现在这年头 不要期待着知恩图报 祈求不要恩将仇报就好了。 </p>\n<p>4：多一事不如少一事。  自己的经历应该放到有价值的人和事上面。 </p>\n<p>5：金钱虽然不是唯一的判断标准 但是却是最有效的衡量一个人的办法。</p>\n<p>6：珍惜零散的时间 </p>\n<p>7：英语 very important</p>\n<p>8：一些事情心里明白就行了 不要说出来</p>\n<img src=\"http://img.my.csdn.net/uploads/201101/25/3619941_1295933551y8U4.jpg\" class=\"right profile\" width=\"300\" height=\"500\" title=\"昔日的小伙伴\">\n","excerpt":43,"source":"_posts/mood.md","slug":"mood","ctime":"2013-08-08T09:16:03.000Z","mtime":"2013-08-21T01:47:10.000Z"},"9":{"id":0,"title":"MQ 笔记之 mac 下安装环境","date":"2013-08-20T09:47:34.000Z","updated":"2013-08-22T01:33:06.000Z","categories":[5],"tags":[1],"comments":true,"layout":"post","content":"<h2>下载</h2>\n<p><a href=\"http://www.apache.org/dyn/closer.cgi?path=/activemq/apache-activemq/5.8.0/apache-activemq-5.8.0-bin.tar.gz\">从下载地址中下载包</a>\n解压包然后把包放到一个自己不会手一抖就删掉的位置，此处我放到了本地的document下\n如下图\n<a name=\"more\"></a></p>\n<img src=\"http://ww2.sinaimg.cn/mw690/a43af4ffjw1e7uav8h7lbj20o80gkjtw.jpg\" class=\"left\" width=\"200\" height=\"300\" title=\"图片\">\n\n<h2>添加环境到path</h2>\n<p>把/你的保存路径/apache-activemq-5.8.0/bin/activemq 添加到 PATH 中 </p>\n<ol>\n<li>cd </li>\n<li>执行 vi .profile </li>\n<li>输入 i </li>\n<li>插入 export MQ=/你的路径/apache-activemq-5.8.0/bin/macosx/activemq</li>\n<li>wq</li>\n<li>source .profile</li>\n</ol>\n<h2>启动mq</h2>\n<p>$Mq start\n输入账号 admin 密码  admin</p>\n<p><strong>注意</strong> 如果用代理上网 请把网络环境设置下 如下图</p>\n<img src=\"http://ww1.sinaimg.cn/mw690/a43af4ffjw1e7ubcv9nx0j20oa08egmc.jpg\" width=\"200\" height=\"300\" title=\"网络配置\">\n\n\n<h2>查看启动效果</h2>\n<img src=\"http://ww1.sinaimg.cn/mw690/a43af4ffjw1e7ubfs7cg1j21ga0oe0yw.jpg\" width=\"200\" height=\"300\" title=\"启动效果\">\n\n\n<h2>基本配置</h2>\n<p>conf/jetty.xml</p>\n<figure class=\"highlight\"><pre><span class=\"tag\">&lt;<span class=\"title\">bean</span> <span class=\"attribute\">id</span>=<span class=\"value\">\"securityConstraint\"</span>&gt;</span>\n \n        <span class=\"tag\">&lt;<span class=\"title\">property</span> <span class=\"attribute\">name</span>=<span class=\"value\">\"name\"</span> <span class=\"attribute\">value</span>=<span class=\"value\">\"BASIC\"</span> /&gt;</span>\n \n        <span class=\"tag\">&lt;<span class=\"title\">property</span> <span class=\"attribute\">name</span>=<span class=\"value\">\"roles\"</span> <span class=\"attribute\">value</span>=<span class=\"value\">\"admin\"</span> /&gt;</span>\n \n        <span class=\"tag\">&lt;<span class=\"title\">property</span> <span class=\"attribute\">name</span>=<span class=\"value\">\"authenticate\"</span> <span class=\"attribute\">value</span>=<span class=\"value\">\"false\"</span> /&gt;</span>\n \n<span class=\"tag\">&lt;/<span class=\"title\">bean</span>&gt;</span>\n</pre></figure>\n\n<p>此处可以配置登陆用户权限</p>\n<figure class=\"highlight\"><pre> <span class=\"tag\">&lt;<span class=\"title\">property</span> <span class=\"attribute\">name</span>=<span class=\"value\">\"connectors\"</span>&gt;</span>\n            <span class=\"tag\">&lt;<span class=\"title\">list</span>&gt;</span>\n                <span class=\"tag\">&lt;<span class=\"title\">bean</span> <span class=\"attribute\">id</span>=<span class=\"value\">\"Connector\"</span> <span class=\"attribute\">class</span>=<span class=\"value\">\"org.eclipse.jetty.server.nio.SelectChannelConnector\"</span>&gt;</span>\n                    <span class=\"tag\">&lt;<span class=\"title\">property</span> <span class=\"attribute\">name</span>=<span class=\"value\">\"port\"</span> <span class=\"attribute\">value</span>=<span class=\"value\">\"8161\"</span> /&gt;</span>\n                <span class=\"tag\">&lt;/<span class=\"title\">bean</span>&gt;</span>\n            <span class=\"tag\">&lt;/<span class=\"title\">list</span>&gt;</span>\n <span class=\"tag\">&lt;/<span class=\"title\">property</span>&gt;</span>\n</pre></figure>\n\n<p>此处用来修改端口号</p>\n","excerpt":194,"source":"_posts/mq1.md","slug":"mq1","ctime":"2013-08-20T09:47:34.000Z","mtime":"2013-08-22T01:33:06.000Z"},"10":{"id":0,"title":"MQ 笔记之 JMS 简介 （什么是JMS）","date":"2013-08-21T13:22:00.000Z","updated":"2013-08-22T02:40:27.000Z","categories":[5],"tags":[1],"comments":true,"layout":"post","content":"<h2>一：JMS基本概念</h2>\n<h3>1.      JMS的目标</h3>\n<p>为企业级的应用提供一种智能的消息系统，JMS定义了一整套的企业级的消息概念与工具，\n<a name=\"more\"></a></p>\n<p>尽可能最小化的Java语言概念去构建最大化企业消息应用。统一已经存在的企业级消息系</p>\n<p>统功能。</p>\n<h3>2.      JMS提供者</h3>\n<p>JMS提供者是指那些完全完成JMS功能与管理功能的JMS消息厂商，理论上JMS提供者完成 </p>\n<p>JMS消息产品必须是100%的纯Java语言实现，可以运行在跨平台的架构与操作系统上，当前</p>\n<p>一些JMS厂商包括IBM,Oracle, JBoss社区 (JBoss Community), Apache 社区(ApacheCommunity)。</p>\n<h3>3.      JMS应用程序, 一个完整的JMS应用应该实现以下功能：</h3>\n<ul>\n<li><p>JMS 客户端 – Java语言开发的接受与发送消息的程序</p>\n</li>\n<li><p>非JMS客户端 – 基于消息系统的本地API实现而不是JMS</p>\n</li>\n<li><p>消息 – 应用程序用来相互交流信息的载体</p>\n</li>\n<li><p>被管理对象–预先配置的JMS对象，JMS管理员创建，被客户端运用。如链接工厂，主题等</p>\n</li>\n<li><p>JMS提供者–完成JMS功能与管理功能的消息系统</p>\n</li>\n</ul>\n<h2>二: JMS 规范</h2>\n<h3>连接工厂</h3>\n<p>连接工厂是GUST用来创建连接的对象，例如ActiveMQ提供的ActiveMQConnectionFactory。</p>\n<h3>连接</h3>\n<p>JMS Connection封装了客户与JMS提供者之间的一个虚拟的连接。</p>\n<h3>会话</h3>\n<p>MS Session是生产和消费消息的一个单线程上下文。会话用于创建消息生产者（producer）、消息消费者（consumer）和消息（message）等。会话提供了一个事务性的上下文，在这个上下文中，一组发送和接收被组合到了一个原子操作中。</p>\n<h3>目的地</h3>\n<p>目的地是客户用来指定它生产的消息的目标和它消费的消息的来源的对象。JMS1.0.2 规范中定义了两种消息传递域</p>\n<h4>点对点的消息模式(Point to Point Messaging)</h4>\n<img src=\"http://ww2.sinaimg.cn/mw690/a43af4ffjw1e7umekfemwj20is06o0tb.jpg\" height=\"300\" title=\" 200 点对点\">\n\n\n<hr>\n<p>下面的JMS对象在点对点消息模式中是必须的：</p>\n<ul>\n<li><p>队列(Queue) – 一个提供者命名的队列对象，客户端将会使用这个命名的队列对象</p>\n</li>\n<li><p>队列链接工厂(QueueConnectionFactory) – 客户端使用队列链接工厂创建链接队列ConnectionQueue来取得与JMS点对点消息提供者的链接。</p>\n</li>\n<li><p>链接队列(ConnectionQueue) – 一个活动的链接队列存在在客户端与点对点消息提供者之间，客户用它创建一个或者多个JMS队列会话(QueueSession)</p>\n</li>\n<li><p>队列会话(QueueSession) – 用来创建队列消息的发送者与接受者(QueueSenderandQueueReceiver)</p>\n</li>\n<li><p>消息发送者(QueueSender 或者MessageProducer)– 发送消息到已经声明的队列</p>\n</li>\n<li><p>消息接受者(QueueReceiver或者MessageConsumer) – 接受已经被发送到指定队列的消息</p>\n</li>\n</ul>\n<p><strong>注意如下：</strong></p>\n<ul>\n<li>每个消息只能有一个消费者。</li>\n<li>消息的生产者和消费者之间没有时间上的相关性。无论消费者在生产者发送消息的时候是否处于运行状态，它都可以提取消息。</li>\n</ul>\n<h4>发布订阅模式(publish – subscribe Mode)</h4>\n<img src=\"http://ww1.sinaimg.cn/mw690/a43af4ffjw1e7umpp9onwj20is0ayjsk.jpg\" class=\"center\" height=\"200\" title=\" 300 发布者\">\n\n<hr>\n<ul>\n<li><p>主题Topic(Destination) – 一个提供者命名的主题对象，客户端将会使用这个命名的主题对象</p>\n</li>\n<li><p>主题链接工厂(TopciConnectionFactory) – 客户端使用主题链接工厂创建链接主题 ConnectionTopic来取得与JMS消息Pub/Sub提供者的链接</p>\n</li>\n<li><p>链接主题(ConnectionTopic) – 一个活动的链接主题存在发布者与订阅者之间</p>\n</li>\n<li><p>会话(TopicSession) – 用来创建主题消息的发布者与订阅者 (TopicPublisher  and TopicSubscribers)</p>\n</li>\n<li><p>消息发送者MessageProducer) – 发送消息到已经声明的主题</p>\n</li>\n<li><p>消息接受者(MessageConsumer) – 接受已经被发送到指定主题的消息</p>\n</li>\n</ul>\n<p><strong>注意如下：</strong></p>\n<ul>\n<li>每个消息可以有多个消费者。</li>\n<li>生产者和消费者之间有时间上的相关性。订阅一个主题的消费者只能消费自它订阅之后发布的消息。JMS规范允许客户创建持久订阅，这在一定程度上放松了时间上的相关性要求。持久订阅允许消费者消费它在未处于激活状态时发送的消息。</li>\n</ul>\n<hr>\n<blockquote>\n<p>本系列博文参考自whitesock  淮少吧 贾志刚</p>\n</blockquote>\n","excerpt":88,"source":"_posts/mq2.md","slug":"mq2","ctime":"2013-08-21T13:22:00.000Z","mtime":"2013-08-22T02:40:27.000Z"},"11":{"id":0,"title":"散文","date":"2013-08-08T02:29:16.000Z","updated":"2013-08-08T06:27:52.000Z","categories":[],"tags":[2],"comments":true,"layout":"post","content":"<h2>浮华过后，心若沉浮浅笑安然</h2>\n<p>生活或许是一件艺术品，需懂得欣赏，意中细品，学会经受。<a name=\"more\"></a>人生似一场追梦，那就是无数个美丽的梦而创造。人生常在繁华中等待，只不过每个人都在等待一个自己想要的未来。人生的迁徙，沉重着你的步履，有些感怀让你沉浸。曾让你迷失了方向，繁华落幕后，空山流水静其身，花开似无情，花落去留意，放眼望去，世间的喜悲离合聚散相依，匆匆如尘埃里的一颗沙粒，生命的深度，靠心去我体悟，生命的宽度，需魅力去赞颂。</p>\n<p>浮华沉寂陌生的城市，穿越年华的酸楚，风停了，雨骤了，心倦了，等待与思念的相互侵蚀，生命的前行，梦的边缘，思绪舞动一隅的嗔怨。行走的日光倾城，常伴有风的抚慰，雨的湿浸，山水的同路，莲的独隅，红尘碾转，自断不了纷争，待过忘川时，不过淡似轻风，花开催人老，纵马须恣意，清浅仲夏煮一壶清茶，待坐而品茗，静看花开花落，笑看云卷亦舒。</p>\n<p>今夕何夕，尘缘路上的回眸一笑，注定了浅笑安然。流年似水，生命的时光中，因为有缘相识，荒草丛生的原野上，没有早一步，晚一步，这就是缘。夏雨微凉，一袭雨过，岁月氤氲了一帘幽梦，芬芳轻盈着一执而念的光阴，生活缱绻起了风景，流年浮华过后，&quot;此情可待成追忆，只是当时已惘然&quot;.</p>\n<p>心最柔软的地方，穿过了心刺的屏障，曾为一朵玫瑰而绽放，蜿蜒寂寞的藤，月光隐约着浪漫的惆怅，穿越横亘的流浪，时间煮雨，回忆终究会让年华淡泊，活着也许是一种修行，时光静好，品一茗清茶，落花无言，人淡如菊，润一份心境，携一缕阳光，让芳华依旧绽放。字里行间的缠绵，泪痕迭起了四季的轮回，愿得一个人，白守不分离，铺满诗意的路径，夜如此静谧，带伤的诗句常娇嗔着粉饰，步伐太急，却忘了缓缓停下来让心安祥。</p>\n<p>山与水的缠绵，任流音乐的浮想，清寂时常敲碎夜的散漫，凄迷的烟雨里，水滴的顺势而滑，水声伴风雨的飘渺芳飞，无垠的夜空，静静的聆听，繁琐打搅，细密的疏雨，意境的恰入，飘散的雨滴，透过肌肤直抵心深处，奈何雨的朦胧，相思成林泪千行。无情的冷风常拔弄着心弦，溅湿的思愁，陌路的不在相见，这个季，风儿依柔，雨儿心醉，满目的寒殇，素色时光的轻狂，喧哗背后的沉静，简单的真谛，心若沉浮，此事不关山与月。</p>\n<p>浮华掠影后，静静的听雨，感风的倾诉，世界太喧闹，已至于背离了自己，沉静中的超脱，不常泛滥，无意的碰触，深知心里的冬天时常接伴，甚至盛夏炎炎，那份落韵的雪，也会勾画着伤感的景致。卑微轻触着虚无，平淡晕染着凄冷。如若没有那么多牵扯，也不会有那么多眷念，不用去刻意与深究，这个世界本就复杂，盼一份温暖，守一份静染，只愿在高山流水间吟诵，世间最难识是情，最难诉的是痴。</p>\n<p>生命总有尽头，心灵总需要出口，每个人身上都有一把锁，有人说寂寞是种狂欢，但真正的寂寞是无法用热闹来填埋，只有你为心灵找到了决口，上锁的心慢慢绽放，才能真正的释怀，人之所以挣扎与纠结，是把钥匙丢了，但希望总在远方起航心若沉浮，浅笑安然。</p>\n<!-- ![](http://ww4.sinaimg.cn/large/a43af4ffjw1e3nomotys9j.jpg)-->\n<!-- <img src=\"http://placekitten.com/890/280\">\n-->\n<img src=\"http://ww4.sinaimg.cn/large/a43af4ffjw1e3nomotys9j.jpg\" class=\"right\" width=\"300\" height=\"400\" title=\"壮壮\">\n\n<!-- <img src=\"http://placekitten.com/300/500\" class=\"right\" width=\"150\" height=\"250\" title=\"Place Kitten #3\">\n\n<img src=\"http://placekitten.com/300/500\" class=\"right\" width=\"150\" height=\"250\" title=\"Place Kitten #4\" alt=\"An image of a very cute kitten\">\n -->","excerpt":53,"source":"_posts/散文.md","slug":"散文","ctime":"2013-08-08T06:22:23.000Z","mtime":"2013-08-08T06:27:52.000Z"},"12":{"id":0,"title":"MQ 笔记之 消息持久化","date":"2013-08-21T15:43:37.000Z","updated":"2013-08-22T02:55:49.000Z","categories":[5],"tags":[1],"comments":true,"layout":"post","content":"<blockquote>\n<p>在broker中设置属性persistent=”true”(默认是true)，同时发送的消息也应该是persitent类型的。ActiveMQ消息持久化有三种方式：AMQ、KahaDB、JDBC。\n配置文件在config/jetty.xml\n<a name=\"more\"></a></p>\n</blockquote>\n<h2>一、AMQ</h2>\n<p>AMQ是一种文件存储形式，它具有写入速度快和容易恢复的特点。消息存储在一个个文件中，文件的默认大小为32兆，如果一条消息的大小超过了32兆，那么这个值必须设置大点。当一个存储文件中的消息已经全部被消费，那么这个文件将被标识为可删除，在下一个清除阶段，这个文件被删除。默认配置如下：</p>\n<figure class=\"highlight\"><pre><span class=\"tag\">&lt;<span class=\"title\">persistenceAdapter</span>&gt;</span>\n  <span class=\"tag\">&lt;<span class=\"title\">amqPersistenceAdapter</span> <span class=\"attribute\">directory</span>=<span class=\"value\">\"activemq-data\"</span> <span class=\"attribute\">maxFileLength</span>=<span class=\"value\">\"32mb\"</span>/&gt;</span>\n<span class=\"tag\">&lt;/<span class=\"title\">persistenceAdapter</span>&gt;</span>\n</pre></figure>\n\n<table>\n<thead>\n<tr>\n<th>属性名称</th>\n<th>默认值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>directory</td>\n<td>activemq-data</td>\n<td>消息文件和日志的存储目录</td>\n</tr>\n<tr>\n<td>useNIO</td>\n<td>true</td>\n<td>使用NIO协议存储消息</td>\n</tr>\n<tr>\n<td>syncOnWrite</td>\n<td>false</td>\n<td>同步写到磁盘，这个选项对性能影响非常大</td>\n</tr>\n<tr>\n<td>maxFileLength</td>\n<td>32mb</td>\n<td>一个消息文件的大小</td>\n</tr>\n<tr>\n<td>persistentIndex</td>\n<td>true</td>\n<td>消息索引的持久化，如果为false，那么索引保存在内存中</td>\n</tr>\n<tr>\n<td>maxCheckpointMessageAddSize</td>\n<td>4kb</td>\n<td>一个事务允许的最大消息量</td>\n</tr>\n<tr>\n<td>cleanupInterval</td>\n<td>30000</td>\n<td>清除操作周期，单位ms</td>\n</tr>\n<tr>\n<td>indexBinSize</td>\n<td>1024</td>\n<td>索引文件缓存页面数，缺省为1024，当amq扩充或者缩减存储时，会锁定整个broker，导致一定时间的阻塞，所以这个值应该调整到比较大，但是代码中实现会动态伸缩，调整效果并不理想。</td>\n</tr>\n<tr>\n<td>indexKeySize</td>\n<td>96</td>\n<td>索引key的大小，key是消息ID</td>\n</tr>\n<tr>\n<td>indexPageSize</td>\n<td>16kb</td>\n<td>索引的页大小</td>\n</tr>\n<tr>\n<td>directoryArchive</td>\n<td>archive</td>\n<td>存储被归档的消息文件目录</td>\n</tr>\n<tr>\n<td>archiveDataLogs</td>\n<td>false</td>\n<td>当为true时，归档的消息文件被移到directoryArchive,而不是直接删除</td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2>二、 KahaDB</h2>\n<p>KahaDB是基于文件的本地数据库储存形式，虽然没有AMQ的速度快，但是它具有强扩展性，恢复的时间比AMQ短，从5.4版本之后KahaDB做为默认的持久化方式。默认配置如下</p>\n<figure class=\"highlight\"><pre> <span class=\"tag\">&lt;<span class=\"title\">persistenceAdapter</span>&gt;</span>\n        <span class=\"tag\">&lt;<span class=\"title\">kahaDB</span> <span class=\"attribute\">directory</span>=<span class=\"value\">\"activemq-data\"</span> <span class=\"attribute\">journalMaxFileLength</span>=<span class=\"value\">\"32mb\"</span>/&gt;</span>\n <span class=\"tag\">&lt;/<span class=\"title\">persistenceAdapter</span>&gt;</span>\n</pre></figure>\n\n<p>KahaDB的属性：</p>\n<table>\n<thead>\n<tr>\n<th>property name</th>\n<th>default value</th>\n<th>Comments</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>directory</td>\n<td>activemq-data</td>\n<td>消息文件和日志的存储目录</td>\n</tr>\n<tr>\n<td>indexWriteBatchSize</td>\n<td>1000</td>\n<td>一批索引的大小，当要更新的索引量到达这个值时，更新到消息文件中</td>\n</tr>\n<tr>\n<td>indexCacheSize</td>\n<td>10000</td>\n<td>内存中，索引的页大小</td>\n</tr>\n<tr>\n<td>enableIndexWriteAsync</td>\n<td>false</td>\n<td>索引是否异步写到消息文件中</td>\n</tr>\n<tr>\n<td>journalMaxFileLength</td>\n<td>32mb</td>\n<td>一个消息文件的大小</td>\n</tr>\n<tr>\n<td>enableJournalDiskSyncs</td>\n<td>true</td>\n<td>是否讲非事务的消息同步写入到磁盘</td>\n</tr>\n<tr>\n<td>cleanupInterval</td>\n<td>30000</td>\n<td>清除操作周期，单位ms</td>\n</tr>\n<tr>\n<td>checkpointInterval</td>\n<td>5000</td>\n<td>索引写入到消息文件的周期，单位ms</td>\n</tr>\n<tr>\n<td>ignoreMissingJournalfiles</td>\n<td>false</td>\n<td>忽略丢失的消息文件，false，当丢失了消息文件，启动异常</td>\n</tr>\n<tr>\n<td>checkForCorruptJournalFiles</td>\n<td>false</td>\n<td>检查消息文件是否损坏，true，检查发现损坏会尝试修复</td>\n</tr>\n<tr>\n<td>checksumJournalFiles</td>\n<td>false</td>\n<td>产生一个checksum，以便能够检测journal文件是否损坏。</td>\n</tr>\n<tr>\n<td><code>5.4版本之后有效的属性:</code></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>archiveDataLogs</td>\n<td>false</td>\n<td>当为true时，归档的消息文件被移到directoryArchive,而不是直接删除</td>\n</tr>\n<tr>\n<td>directoryArchive</td>\n<td>null</td>\n<td>存储被归档的消息文件目录</td>\n</tr>\n<tr>\n<td>databaseLockedWaitDelay</td>\n<td>10000</td>\n<td>在使用负载时，等待获得文件锁的延迟时间，单位ms</td>\n</tr>\n<tr>\n<td>maxAsyncJobs</td>\n<td>10000</td>\n<td>同个生产者产生等待写入的异步消息最大量</td>\n</tr>\n<tr>\n<td>concurrentStoreAndDispatchTopics</td>\n<td>false</td>\n<td>当写入消息的时候，是否转发主题消息</td>\n</tr>\n<tr>\n<td>concurrentStoreAndDispatchQueues</td>\n<td>true</td>\n<td>当写入消息的时候，是否转发队列消息</td>\n</tr>\n<tr>\n<td>5.6版本之后有效的属性:</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>archiveCorruptedIndex</td>\n<td>false</td>\n<td>是否归档错误的索引</td>\n</tr>\n</tbody>\n</table>\n<p>从5.6版本之后，有可能发布通过多个kahadb持久适配器来实现分布式目标队列存储。什么时候用呢？如果有一个快速的生产者和消费者，当某一个时刻生产者发生了不规范的消费，那么有可能产生一条消息被存储在两个消息文件中，同时，有些目标队列是危险的并且要求访问磁盘。在这种情况下，你应该用通配符来使用mKahaDB。如果目标队列是分布的，事务是可以跨越多个消息文件的。</p>\n<p>每个KahaDB的实例都可以配置单独的适配器，如果没有目标队列提交给filteredKahaDB，那么意味着对所有的队列有效。如果一个队列没有对应的适配器，那么将会抛出一个异常。配置如下：</p>\n<figure class=\"highlight\"><pre><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"title\">persistenceAdapter</span>&gt;</span>\n  <span class=\"tag\">&lt;<span class=\"title\">mKahaDB</span> <span class=\"attribute\">directory</span>=<span class=\"value\">\"</span><span class=\"variable\">${activemq.base}</span><span class=\"xml\">/data/kahadb\"&gt;\n    <span class=\"tag\">&lt;<span class=\"title\">filteredPersistenceAdapters</span>&gt;</span>\n      <span class=\"comment\">&lt;!-- match all queues --&gt;</span>\n      <span class=\"tag\">&lt;<span class=\"title\">filteredKahaDB</span> <span class=\"attribute\">queue</span>=<span class=\"value\">\"&gt;\"</span>&gt;</span>\n        <span class=\"tag\">&lt;<span class=\"title\">persistenceAdapter</span>&gt;</span>\n          <span class=\"tag\">&lt;<span class=\"title\">kahaDB</span> <span class=\"attribute\">journalMaxFileLength</span>=<span class=\"value\">\"</span><span class=\"number\">32</span><span class=\"xml\">mb\"/&gt;\n        <span class=\"tag\">&lt;/<span class=\"title\">persistenceAdapter</span>&gt;</span>\n      <span class=\"tag\">&lt;/<span class=\"title\">filteredKahaDB</span>&gt;</span>\n      \n      <span class=\"comment\">&lt;!-- match all destinations --&gt;</span>\n      <span class=\"tag\">&lt;<span class=\"title\">filteredKahaDB</span>&gt;</span>\n        <span class=\"tag\">&lt;<span class=\"title\">persistenceAdapter</span>&gt;</span>\n          <span class=\"tag\">&lt;<span class=\"title\">kahaDB</span> <span class=\"attribute\">enableJournalDiskSyncs</span>=<span class=\"value\">\"false\"</span>/&gt;</span>\n        <span class=\"tag\">&lt;/<span class=\"title\">persistenceAdapter</span>&gt;</span>\n      <span class=\"tag\">&lt;/<span class=\"title\">filteredKahaDB</span>&gt;</span>\n    <span class=\"tag\">&lt;/<span class=\"title\">filteredPersistenceAdapters</span>&gt;</span>\n  <span class=\"tag\">&lt;/<span class=\"title\">mKahaDB</span>&gt;</span>\n <span class=\"tag\">&lt;/<span class=\"title\">persistenceAdapter</span>&gt;</span></span>\n</pre></figure>\n\n<p>如果filteredKahaDB的perDestination属性设置为true，那么匹配的目标队列将会得到自己对应的KahaDB实例。配置如下</p>\n<figure class=\"highlight\"><pre><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"title\">persistenceAdapter</span>&gt;</span>\n  <span class=\"tag\">&lt;<span class=\"title\">mKahaDB</span> <span class=\"attribute\">directory</span>=<span class=\"value\">\"</span><span class=\"variable\">${activemq.base}</span><span class=\"xml\">/data/kahadb\"&gt;\n    <span class=\"tag\">&lt;<span class=\"title\">filteredPersistenceAdapters</span>&gt;</span>\n      <span class=\"comment\">&lt;!-- kahaDB per destinations --&gt;</span>\n      <span class=\"tag\">&lt;<span class=\"title\">filteredKahaDB</span> <span class=\"attribute\">perDestination</span>=<span class=\"value\">\"true\"</span> &gt;</span>\n        <span class=\"tag\">&lt;<span class=\"title\">persistenceAdapter</span>&gt;</span>\n          <span class=\"tag\">&lt;<span class=\"title\">kahaDB</span> <span class=\"attribute\">journalMaxFileLength</span>=<span class=\"value\">\"</span><span class=\"number\">32</span><span class=\"xml\">mb\" /&gt;\n        <span class=\"tag\">&lt;/<span class=\"title\">persistenceAdapter</span>&gt;</span>\n      <span class=\"tag\">&lt;/<span class=\"title\">filteredKahaDB</span>&gt;</span>\n    <span class=\"tag\">&lt;/<span class=\"title\">filteredPersistenceAdapters</span>&gt;</span>\n  <span class=\"tag\">&lt;/<span class=\"title\">mKahaDB</span>&gt;</span>\n <span class=\"tag\">&lt;/<span class=\"title\">persistenceAdapter</span>&gt;</span></span>\n</pre></figure>\n\n<h2>三、 JDBC</h2>\n<p>配置JDBC适配器</p>\n<figure class=\"highlight\"><pre><span class=\"tag\">&lt;<span class=\"title\">persistenceAdapter</span>&gt;</span>\n        <span class=\"tag\">&lt;<span class=\"title\">jdbcPersistenceAdapter</span> <span class=\"attribute\">dataSource</span>=<span class=\"value\">\"#mysql-ds\"</span> <span class=\"attribute\">createTablesOnStartup</span>=<span class=\"value\">\"false\"</span> /&gt;</span>\n<span class=\"tag\">&lt;/<span class=\"title\">persistenceAdapter</span>&gt;</span>\n</pre></figure>\n\n<p>dataSource指定持久化数据库的bean，createTablesOnStartup是否在启动的时候创建数据表，默认值是true，这样每次启动都会去创建数据表了，一般是第一次启动的时候设置为true，之后改成false。</p>\n<p>MYSQL持久化bean</p>\n<figure class=\"highlight\"><pre><span class=\"tag\">&lt;<span class=\"title\">bean</span> <span class=\"attribute\">id</span>=<span class=\"value\">\"mysql-ds\"</span> <span class=\"attribute\">class</span>=<span class=\"value\">\"org.apache.commons.dbcp.BasicDataSource\"</span> <span class=\"attribute\">destroy-method</span>=<span class=\"value\">\"close\"</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"title\">property</span> <span class=\"attribute\">name</span>=<span class=\"value\">\"driverClassName\"</span> <span class=\"attribute\">value</span>=<span class=\"value\">\"com.mysql.jdbc.Driver\"</span>/&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"title\">property</span> <span class=\"attribute\">name</span>=<span class=\"value\">\"url\"</span> <span class=\"attribute\">value</span>=<span class=\"value\">\"jdbc:mysql://localhost/activemq?relaxAutoCommit=true\"</span>/&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"title\">property</span> <span class=\"attribute\">name</span>=<span class=\"value\">\"username\"</span> <span class=\"attribute\">value</span>=<span class=\"value\">\"activemq\"</span>/&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"title\">property</span> <span class=\"attribute\">name</span>=<span class=\"value\">\"password\"</span> <span class=\"attribute\">value</span>=<span class=\"value\">\"activemq\"</span>/&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"title\">property</span> <span class=\"attribute\">name</span>=<span class=\"value\">\"poolPreparedStatements\"</span> <span class=\"attribute\">value</span>=<span class=\"value\">\"true\"</span>/&gt;</span>\n<span class=\"tag\">&lt;/<span class=\"title\">bean</span>&gt;</span>\n</pre></figure>\n\n<p>SQL Server持久化bean</p>\n<figure class=\"highlight\"><pre> <span class=\"tag\">&lt;<span class=\"title\">bean</span> <span class=\"attribute\">id</span>=<span class=\"value\">\"mssql-ds\"</span> <span class=\"attribute\">class</span>=<span class=\"value\">\"net.sourceforge.jtds.jdbcx.JtdsDataSource\"</span> <span class=\"attribute\">destroy-method</span>=<span class=\"value\">\"close\"</span>&gt;</span>\n   <span class=\"tag\">&lt;<span class=\"title\">property</span> <span class=\"attribute\">name</span>=<span class=\"value\">\"serverName\"</span> <span class=\"attribute\">value</span>=<span class=\"value\">\"SERVERNAME\"</span>/&gt;</span>\n   <span class=\"tag\">&lt;<span class=\"title\">property</span> <span class=\"attribute\">name</span>=<span class=\"value\">\"portNumber\"</span> <span class=\"attribute\">value</span>=<span class=\"value\">\"PORTNUMBER\"</span>/&gt;</span>\n   <span class=\"tag\">&lt;<span class=\"title\">property</span> <span class=\"attribute\">name</span>=<span class=\"value\">\"databaseName\"</span> <span class=\"attribute\">value</span>=<span class=\"value\">\"DATABASENAME\"</span>/&gt;</span>\n   <span class=\"tag\">&lt;<span class=\"title\">property</span> <span class=\"attribute\">name</span>=<span class=\"value\">\"user\"</span> <span class=\"attribute\">value</span>=<span class=\"value\">\"USER\"</span>/&gt;</span>\n   <span class=\"tag\">&lt;<span class=\"title\">property</span> <span class=\"attribute\">name</span>=<span class=\"value\">\"password\"</span> <span class=\"attribute\">value</span>=<span class=\"value\">\"PASSWORD\"</span>/&gt;</span>\n <span class=\"tag\">&lt;/<span class=\"title\">bean</span>&gt;</span>\n</pre></figure>\n\n<p>Oracle持久化bean</p>\n<figure class=\"highlight\"><pre><span class=\"tag\">&lt;<span class=\"title\">bean</span> <span class=\"attribute\">id</span>=<span class=\"value\">\"oracle-ds\"</span> <span class=\"attribute\">class</span>=<span class=\"value\">\"org.apache.commons.dbcp.BasicDataSource\"</span> <span class=\"attribute\">destroy-method</span>=<span class=\"value\">\"close\"</span>&gt;</span>\n\t<span class=\"tag\">&lt;<span class=\"title\">property</span> <span class=\"attribute\">name</span>=<span class=\"value\">\"driverClassName\"</span> <span class=\"attribute\">value</span>=<span class=\"value\">\"oracle.jdbc.driver.OracleDriver\"</span>/&gt;</span>\n\t<span class=\"tag\">&lt;<span class=\"title\">property</span> <span class=\"attribute\">name</span>=<span class=\"value\">\"url\"</span> <span class=\"attribute\">value</span>=<span class=\"value\">\"jdbc:oracle:thin:@10.53.132.47:1521:activemq\"</span>/&gt;</span>\n\t<span class=\"tag\">&lt;<span class=\"title\">property</span> <span class=\"attribute\">name</span>=<span class=\"value\">\"username\"</span> <span class=\"attribute\">value</span>=<span class=\"value\">\"activemq\"</span>/&gt;</span>\n\t<span class=\"tag\">&lt;<span class=\"title\">property</span> <span class=\"attribute\">name</span>=<span class=\"value\">\"password\"</span> <span class=\"attribute\">value</span>=<span class=\"value\">\"activemq\"</span>/&gt;</span>\n\t<span class=\"tag\">&lt;<span class=\"title\">property</span> <span class=\"attribute\">name</span>=<span class=\"value\">\"maxActive\"</span> <span class=\"attribute\">value</span>=<span class=\"value\">\"200\"</span>/&gt;</span>\n\t<span class=\"tag\">&lt;<span class=\"title\">property</span> <span class=\"attribute\">name</span>=<span class=\"value\">\"poolPreparedStatements\"</span> <span class=\"attribute\">value</span>=<span class=\"value\">\"true\"</span>/&gt;</span>\n<span class=\"tag\">&lt;/<span class=\"title\">bean</span>&gt;</span>\n</pre></figure>\n\n<p>DB2持久化bean</p>\n<figure class=\"highlight\"><pre><span class=\"tag\">&lt;<span class=\"title\">bean</span> <span class=\"attribute\">id</span>=<span class=\"value\">\"db2-ds\"</span> <span class=\"attribute\">class</span>=<span class=\"value\">\"org.apache.commons.dbcp.BasicDataSource\"</span>  <span class=\"attribute\">destroy-method</span>=<span class=\"value\">\"close\"</span>&gt;</span>\n      <span class=\"tag\">&lt;<span class=\"title\">property</span> <span class=\"attribute\">name</span>=<span class=\"value\">\"driverClassName\"</span> <span class=\"attribute\">value</span>=<span class=\"value\">\"com.ibm.db2.jcc.DB2Driver\"</span>/&gt;</span>\n      <span class=\"tag\">&lt;<span class=\"title\">property</span> <span class=\"attribute\">name</span>=<span class=\"value\">\"url\"</span> <span class=\"attribute\">value</span>=<span class=\"value\">\"jdbc:db2://hndb02.bf.ctc.com:50002/activemq\"</span>/&gt;</span>\n      <span class=\"tag\">&lt;<span class=\"title\">property</span> <span class=\"attribute\">name</span>=<span class=\"value\">\"username\"</span> <span class=\"attribute\">value</span>=<span class=\"value\">\"activemq\"</span>/&gt;</span>\n      <span class=\"tag\">&lt;<span class=\"title\">property</span> <span class=\"attribute\">name</span>=<span class=\"value\">\"password\"</span> <span class=\"attribute\">value</span>=<span class=\"value\">\"activemq\"</span>/&gt;</span>\n      <span class=\"tag\">&lt;<span class=\"title\">property</span> <span class=\"attribute\">name</span>=<span class=\"value\">\"maxActive\"</span> <span class=\"attribute\">value</span>=<span class=\"value\">\"200\"</span>/&gt;</span>\n      <span class=\"tag\">&lt;<span class=\"title\">property</span> <span class=\"attribute\">name</span>=<span class=\"value\">\"poolPreparedStatements\"</span> <span class=\"attribute\">value</span>=<span class=\"value\">\"true\"</span>/&gt;</span>\n<span class=\"tag\">&lt;/<span class=\"title\">bean</span>&gt;</span>\n</pre></figure>\n\n<hr>\n<blockquote>\n<p>本博文from 淮少吧</p>\n</blockquote>\n","excerpt":137,"source":"_posts/mq3.md","slug":"mq3","ctime":"2013-08-21T15:43:37.000Z","mtime":"2013-08-22T02:55:49.000Z"},"13":{"id":0,"title":"MQ 笔记之 游标 及其游标优化","date":"2013-08-22T01:38:51.000Z","updated":"2013-08-22T02:53:57.000Z","categories":[5],"tags":[1],"comments":true,"layout":"post","content":"<h2>概观</h2>\n<blockquote>\n<p>在ActiveMQ的Broker中，光标用来持有一批在内存等待发送目标地址的消息。默认情况下这小消息被从存储器取出只想一个cursor(存储光标)<br><a name=\"more\"></a>\n5.0.0版本后，Activemq实现了一种新的内存模型来防止慢消费者阻塞快速生产者。通常消息在未消费或者发送后未收到消费者的确认信息时都会持久保存消息到存储中。当有消费者来消费消息时，broker会分页一批一批的从存储中取出消息，放入消息处理队列。游标就是指向下次批量获取消息时的存储位置。   </p>\n</blockquote>\n<p>ctiveMQ有另一种游标实现，VM cursor，在某些情境下非常快。VM cursor是，进入的消息直接关联cursor，同时存储到消息存储器中。（关联cursor的同时存储到消息存储器中）。如果消费者（consumer）非常快，可以跟的上消息流的话，VM cursor会工作的非常好。但是，对于慢消费者，这个策略就不是那么有效了。VMcursor被积压的消息填满，同时它可能会去调用流控制去抑制producer生产message。</p>\n<h2>根据游标的保存方式不同，可分为三种类型：</h2>\n<h3>Store-based cursors</h3>\n<p>broker默认采用的游标。它将游标信息保存在存储中。针对速度不同的消费者，这种游标机制采取的方式不同。对于快速消费者，因为消费速度很快，存储中 的消息数量会很少，所以不需要游标。这时，消息发送到broker时，先保存在持久存储中，然后直接发送给了消费者。而对于慢消费者，消息的持久存储中会 保存大量的消息，所以需要使用游标来指定下一次批量读取消息的位置。  </p>\n<img src=\"http://ww2.sinaimg.cn/mw690/a43af4ffjw1e7v81y31hnj20ip04qaaj.jpg\" class=\"center\" title=\"Store-based实现原理图 300 200\">\n\n<p> <strong>图一：</strong></p>\n<pre><code><figure class=\"highlight\"><pre> 消息接收后，首先完成消息存储的工作，如(1)所示，然后会判断是否有空闲的内存可用，如果有的话，就走路径1，直接把消息存放在内存中的LinkedHashMap，如果没有可用内存，则走路径2，当需要消息的时候，直接从消息存储的介质里每次读取一批消息，然后存入LinkedHashMap。\n</pre></figure></code></pre>\n<h3>VM cursors</h3>\n<p>若消费者能跟上生产者生产的速度，这时持久存储中消息虽然不是很多，但是若能也能在内存中保存一些游标，对获取存储中的消息的性能会有很大的提升。 \n那么VM Cursors在ActiveMQ4.x中是如何工作的呢？发送消息保存在内存中，并在需要的时候传递给调度队列。这可以是非常快的，但也有不利的一面，不能够处理非常缓慢的消费者或消费者已经很长一段时间处于非活动状态：   </p>\n<img src=\"http://ww2.sinaimg.cn/mw690/a43af4ffjw1e7v878r0ahj20iu04tjrr.jpg\" class=\"center\" title=\"file实现原理图 300 200\">\n\n<p>  <strong>图二：</strong></p>\n<pre><code><figure class=\"highlight\"><pre>消息接收后，首先完成消息存储的工作，如(1)所示，然后会判断是否有空闲的内存可用，如果有的话，就走路径1，直接把消息存放在内存中的LinkedList，如果没有可用内存，则走路径2，把消息写入临时文件中，当需要消息的时候，直接从临时文件中读写一批，然后送入LinkedList。\n</pre></figure></code></pre>\n<h3>File-based cursors</h3>\n<p>对VM cursors 的一种改进。当内存中的游标达到一定限额后，就会将一些游标存储到磁盘上的临时文件中。使用这种类型的游标时，消息储存可能会变慢，但消费者处理一般都会更快。通过缓冲到磁盘，它可以让消息代理来处理不受内存限制的大量消息，而生产者发送消息的速度会受到影响：\n <strong>图三</strong></p>\n <img src=\"http://ww1.sinaimg.cn/mw690/a43af4ffjw1e7v8airx6dj20it04sjrl.jpg\" class=\"center\" title=\"vm 实现原理 300 200\">\n\n<pre><code><figure class=\"highlight\"><pre> 消息接收后，首先完成消息存储的工作，如(1)所示，然后直接把消息存放在内存中的LinkedList。\n</pre></figure></code></pre>\n<h3>Paging for Non-Persistent Messages（非持久性的消息分页调度）</h3>\n<p>Store based cursor也可以处理非持久性的消息，也就是没有存储在磁盘中的消息，非持久性消息被直接传递给游标，所以Store based cursor也只是嵌入了File based cursor的功能。</p>\n<h2>3种消息cursor的比较</h2>\n<table>\n<thead>\n<tr>\n<th>消息cursor类型</th>\n<th>性能</th>\n<th>稳定性</th>\n<th>最佳使用场景</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Store-based</td>\n<td>当内存不够时，需要进行1次消息存储操作，性能在3种方式中居中</td>\n<td>最好</td>\n<td>activeMQ默认使用该cursor，因为它能满足大部分场景需要</td>\n</tr>\n<tr>\n<td>File</td>\n<td>当内存不够时，需要进行2次消息存储操作，并且在删除消息的时候也就相应的要删除2次，性能在3种方式中最差</td>\n<td>居中</td>\n<td>主要用在当消息存储慢(如消息是放在数据库里)，并且消费者相对快的情况下</td>\n</tr>\n<tr>\n<td>VM</td>\n<td>在内存够的情况下，3种message cursor性能一样</td>\n<td>最容易出现内存溢出的问题</td>\n<td>很快，但不能处理慢消息消费者</td>\n</tr>\n</tbody>\n</table>\n<h3>基于存储的消息指针_测试结果</h3>\n<table>\n<thead>\n<tr>\n<th>测试方法</th>\n<th>结果说明</th>\n<th>是否通过</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>开500个queue 持久化消息/非持久化消息 的发送客户端，一直发送,不接收，因为是默认的，所以不用在服务器端配置。</td>\n<td>1．对于非持久化消息，一定数量之后，也会产生临时文件。 2．对于持久化的消息，则适用该方式的消息指针，直到达到磁盘空间的设置上限。</td>\n<td>是</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>VM消息指针_测试结果</h3>\n<table>\n<thead>\n<tr>\n<th>测试方法</th>\n<th>结果说明</th>\n<th>是否通过</th>\n<th>备注 </th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>开500个queue 持久化消息/非持久化消息 的发送客户端，一直发送，在Activemq.xml配置文件中配置：cursore 队列中存储到一定量消息的时候，broker不再接收生产者发送过来的消息，56W左右，broker也不报错，客户端也不报错。</td>\n<td>是</td>\n<td>若设置producerflowControl=false，则消息数量持续增长，直到broker报错：WARN  AMQMessageStore  - Message could not be added to long term store: Java heap space java.lang.OutOfMemoryError: Java heap space </td>\n</tr>\n</tbody>\n</table>\n<h3>基于文件的消息指针_测试结果</h3>\n<table>\n<thead>\n<tr>\n<th>测试方法</th>\n<th>结果说明</th>\n<th>是否通过</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>开500个queue 持久化消息/非持久化消息 的发送客户端，一直发送，在Activemq.xml配置文件中配置：fileQueueCursor</td>\n<td>一段时间之后，broker打印出一信息：INFO MonetStore - Monet Store using data directory &quot;C:\\Activemq 5.1\\bin..  \\data\\localhost\\tmp_storage&quot;  临时文件被放置在tmp_storage目录下</td>\n<td>是</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h2>Configuring Cursors</h2>\n<p>Activemq默认使用store-based游标。当然也可为不同的Destination修改游标策略。通过修改destinationPolicy节点来更改默认配置。<br>destinationPolicy节点包含多ge policyMap节点。<br>policyMap包含一个policyEntries节点，policyEntries节点包含多个policyEntry 节点。policyEntry就是具体的一个游标策略了。<br>Topics的消费者分为持久订阅者和临时订阅者，所以有两套配置。Queues只有一类消费者，所以只有一套配置。\n对于持久订阅者可以使用PendingDurableSubscriberMessageStoragePolicy来指定游标策略。可配置的策略有vmDurableCursor和fileDurableSubscriberCursor. </p>\n<p><strong>对于临时订阅者可以使用pendingSubscriberPolicy 来指定。可配置的策略有vmCursor和fileCursor。下面是关于Topics的一些xml配置：</strong></p>\n<figure class=\"highlight\"><pre>&lt;beans <span class=\"keyword\">...</span> &gt;\n&lt;broker <span class=\"keyword\">...</span>&gt;\n    <span class=\"keyword\">...</span>\n&lt;destinationPolicy&gt;\n&lt;policyMap&gt;\n&lt;policyEntries&gt;\n&lt;policyEntrytopic=<span class=\"string\">\"com.iona.&gt;\"</span>&gt;\n            <span class=\"keyword\">...</span>\n&lt;pendingSubscriberPolicy&gt;\n&lt;vmCursor/&gt;\n&lt;/pendingSubscriberPolicy&gt;\n&lt;PendingDurableSubscriberMessageStoragePolicy&gt;\n&lt;fileDurableSubscriberPolicy/&gt;\n&lt;/PendingDurableSubscriberMessageStoragePolicy&gt;\n            <span class=\"keyword\">...</span>\n&lt;/policyEntry&gt;\n          <span class=\"keyword\">...</span>\n&lt;/policyEntries&gt;\n&lt;/policyMap&gt;\n&lt;/destinationPolicy&gt;\n    <span class=\"keyword\">...</span>\n&lt;/broker&gt;\n  <span class=\"keyword\">...</span>\n&lt;/beans&gt;\n</pre></figure>\n\n<p><strong>Queues 同样也有vm和file两种类型的游标存储策略。pendingQueuePolicy 节点的可配置子节点有vmQueueCursor和fileQueueCursor</strong></p>\n<figure class=\"highlight\"><pre>&lt;beans <span class=\"keyword\">...</span> &gt;\n&lt;broker <span class=\"keyword\">...</span>&gt;\n        <span class=\"keyword\">...</span>   \n&lt;destinationPolicy&gt;\n&lt;policyMap&gt;\n&lt;policyEntries&gt;\n&lt;policyEntryqueue=<span class=\"string\">\"com.iona.&gt;\"</span>&gt;  \n                <span class=\"keyword\">...</span>   \n&lt;pendingQueuePolicy&gt;\n&lt;vmQueueCursor/&gt;\n&lt;/pendingQueuePolicy&gt;\n                <span class=\"keyword\">...</span>   \n&lt;/policyEntry&gt;\n              <span class=\"keyword\">...</span>   \n&lt;/policyEntries&gt;\n&lt;/policyMap&gt;\n&lt;/destinationPolicy&gt;\n        <span class=\"keyword\">...</span>   \n&lt;/broker&gt;\n      <span class=\"keyword\">...</span>   \n&lt;/beans&gt;\n</pre></figure>\n\n<h3>配置vmcursor：</h3>\n<p>下面配置了一个borker的所有topic和queue都使用了vmCursor</p>\n<figure class=\"highlight\"><pre><span class=\"tag\">&lt;<span class=\"title\">broker</span> <span class=\"attribute\">...</span> &gt;</span>\n  ...\n  <span class=\"tag\">&lt;<span class=\"title\">destinationPolicy</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"title\">policyMap</span>&gt;</span>\n      <span class=\"tag\">&lt;<span class=\"title\">policyEntries</span>&gt;</span>\n        <span class=\"tag\">&lt;<span class=\"title\">policyEntry</span> <span class=\"attribute\">topic</span>=<span class=\"value\">\"&gt;\"</span>&gt;</span>\n          <span class=\"tag\">&lt;<span class=\"title\">pendingSubscriberPolicy</span>&gt;</span>\n            <span class=\"tag\">&lt;<span class=\"title\">vmCursor</span> /&gt;</span>\n          <span class=\"tag\">&lt;/<span class=\"title\">pendingSubscriberPolicy</span>&gt;</span>\n        <span class=\"tag\">&lt;/<span class=\"title\">policyEntry</span>&gt;</span>\n        <span class=\"tag\">&lt;<span class=\"title\">policyEntry</span> <span class=\"attribute\">queue</span>=<span class=\"value\">\"&gt;\"</span>&gt;</span>\n          <span class=\"tag\">&lt;<span class=\"title\">pendingSubscriberPolicy</span>&gt;</span>\n            <span class=\"tag\">&lt;<span class=\"title\">vmCursor</span> /&gt;</span>\n          <span class=\"tag\">&lt;/<span class=\"title\">pendingSubscriberPolicy</span>&gt;</span>\n        <span class=\"tag\">&lt;/<span class=\"title\">policyEntry</span>&gt;</span>\n      <span class=\"tag\">&lt;/<span class=\"title\">policyEntries</span>&gt;</span>\n    <span class=\"tag\">&lt;/<span class=\"title\">policyMap</span>&gt;</span>\n  <span class=\"tag\">&lt;/<span class=\"title\">destinationPolicy</span>&gt;</span>\n  ...\n<span class=\"tag\">&lt;/<span class=\"title\">broker</span>&gt;</span>\n</pre></figure>\n\n<p>topic和queue都使用了通配符【&gt;】,这个匹配所有的目标名称。你可以根据情况指定一些选择目标的模式。但是VM Cursor仅仅适用于那些消费者可以跟得上目标消息节奏的这种情况。</p>\n<hr>\n<p><a href=\"http://www.cnblogs.com/kaka/archive/2012/07/24/2606699.html\">http://www.cnblogs.com/kaka/archive/2012/07/24/2606699.html</a>\n<a href=\"http://netcomm.iteye.com/blog/470585\">http://netcomm.iteye.com/blog/470585</a></p>\n","excerpt":105,"source":"_posts/mq4.md","slug":"mq4","ctime":"2013-08-22T01:38:51.000Z","mtime":"2013-08-22T02:53:57.000Z"},"14":{"id":0,"title":"MQ 笔记之 发送接受实例","date":"2013-08-23T02:27:45.000Z","updated":"2013-08-23T02:35:49.000Z","categories":[5],"tags":[1],"comments":true,"layout":"post","content":"<blockquote>\n<p>mq 支持多种发送格式  BytesMessage  MapMessage ObjectMessage TextMessage StreamMessage等\n<a name=\"more\"></a></p>\n</blockquote>\n<p>本文章以 MapMessage 和 ObjectMessage 为例</p>\n<p><strong>注意 发送ObjectMessage时  接受实例必须相同类名</strong></p>\n<h2>发送实例</h2>\n<p>import org.apache.activemq.ActiveMQConnectionFactory;</p>\n<p>import javax.jms.*;</p>\n<p>public class Send {</p>\n<p> public static void main(String[] args) throws Exception {\n        ConnectionFactory connectionFactory = new ActiveMQConnectionFactory();</p>\n<pre><code><figure class=\"highlight\"><pre>    Connection connection = connectionFactory<span class=\"preprocessor\">.createConnection</span>()<span class=\"comment\">;</span>\n    connection<span class=\"preprocessor\">.start</span>()<span class=\"comment\">;</span>\n\n    Session session = connection<span class=\"preprocessor\">.createSession</span>(Boolean<span class=\"preprocessor\">.TRUE</span>, Session<span class=\"preprocessor\">.AUTO</span>_ACKNOWLEDGE)<span class=\"comment\">;</span>\n    Destination destination = session<span class=\"preprocessor\">.createQueue</span>(<span class=\"string\">\"hf\"</span>)<span class=\"comment\">;</span>\n\n    MessageProducer producer = session<span class=\"preprocessor\">.createProducer</span>(destination)<span class=\"comment\">;</span>\n   for(int i=<span class=\"number\">0</span><span class=\"comment\">; i&lt;3; i++) {</span>\n</pre></figure></code></pre>\n<p>//            MapMessage message = session.createMapMessage();\n//           message.setLong(&quot;count&quot;, new Date().getTime());\n//            message.setObject(&quot;hf&quot;,new SendData());\n      ObjectMessage message = session.createObjectMessage();\n      message.setObject(new SendData());\n//           message.setBytes(&quot;count&quot;, getTestData(1));\n            Thread.sleep(1);\n            //通过消息生产者发出消息\n            producer.send(message);\n        }\n        session.commit();\n        session.close();\n        connection.close();\n    }\n}</p>\n<h2>接收实例</h2>\n<figure class=\"highlight\"><pre>import org<span class=\"preprocessor\">.apache</span><span class=\"preprocessor\">.activemq</span><span class=\"preprocessor\">.ActiveMQConnectionFactory</span><span class=\"comment\">;</span>\n\nimport javax<span class=\"preprocessor\">.jms</span>.*<span class=\"comment\">;</span>\n\npublic class Recive {\n\npublic static void main(String[] args) throws Exception {\n    ConnectionFactory connectionFactory = new ActiveMQConnectionFactory()<span class=\"comment\">;</span>\n\n    Connection connection = connectionFactory<span class=\"preprocessor\">.createConnection</span>()<span class=\"comment\">;</span>\n    connection<span class=\"preprocessor\">.start</span>()<span class=\"comment\">;</span>\n\n    final Session session = connection<span class=\"preprocessor\">.createSession</span>(Boolean<span class=\"preprocessor\">.TRUE</span>, Session<span class=\"preprocessor\">.AUTO</span>_ACKNOWLEDGE)<span class=\"comment\">;</span>\n    Destination destination = session<span class=\"preprocessor\">.createQueue</span>(<span class=\"string\">\"hf\"</span>)<span class=\"comment\">;</span>\n\n    MessageConsumer consumer = session<span class=\"preprocessor\">.createConsumer</span>(destination)<span class=\"comment\">;</span>\n<span class=\"comment\">/*//listener 方式\nconsumer.setMessageListener(new MessageListener() {\n\n    public void onMessage(Message msg) {\n        MapMessage message = (MapMessage) msg;\n        //TODO something....\n        System.out.println(\"收到消息：\" + new Date(message.getLong(\"count\")));\n        session.commit();\n    }\n\n});\nThread.sleep(30000);\n\t*/</span>\n\tint i=<span class=\"number\">0</span><span class=\"comment\">;</span>\n\twhile(i&lt;<span class=\"number\">100</span>) {\n\ti++<span class=\"comment\">;</span>\n\t//            MapMessage message = (MapMessage) consumer<span class=\"preprocessor\">.receive</span>()<span class=\"comment\">;</span>\n\tObjectMessage message = (ObjectMessage) consumer<span class=\"preprocessor\">.receive</span>()<span class=\"comment\">;</span>\n\n\tsession<span class=\"preprocessor\">.commit</span>()<span class=\"comment\">;</span>\n\n\t//TODO something....\n\t//             System<span class=\"preprocessor\">.out</span><span class=\"preprocessor\">.println</span>(<span class=\"string\">\"收到消息：\"</span> + arrayToString(message<span class=\"preprocessor\">.getBytes</span>(<span class=\"string\">\"count\"</span>)))<span class=\"comment\">;</span>\n\n\tSystem<span class=\"preprocessor\">.out</span><span class=\"preprocessor\">.println</span>(<span class=\"string\">\"收到消息：\"</span> + ((SendData) message<span class=\"preprocessor\">.getObject</span>())<span class=\"preprocessor\">.getDateStr</span>())<span class=\"comment\">;</span>\n\t}\n\n\tsession<span class=\"preprocessor\">.close</span>()<span class=\"comment\">;</span>\n\tconnection<span class=\"preprocessor\">.close</span>()<span class=\"comment\">;</span>\n}\n\n//    public static final String arrayToString(byte[] bytes)\n//    {\n//        StringBuffer buff = new StringBuffer()<span class=\"comment\">;</span>\n//        for (int i = <span class=\"number\">0</span><span class=\"comment\">; i &lt; bytes.length; i++)</span>\n//        {\n//            buff<span class=\"preprocessor\">.append</span>(bytes[i] + <span class=\"string\">\" \"</span>)<span class=\"comment\">;</span>\n//        }\n//        return buff<span class=\"preprocessor\">.toString</span>()<span class=\"comment\">;</span>\n//    }\n}\n</pre></figure>\n\n<h2>传递参数</h2>\n<p>import java.io.Serializable;\nimport java.util.Date;</p>\n<p>/<em>*\n </em> Created with IntelliJ IDEA.\n <em> User: jason\n </em> Date: 13-8-22\n <em> Time: 下午5:21\n </em> To change this template use File | Settings | File Templates.\n */\npublic class SendData  implements Serializable {</p>\n<p>//    private  static  final  long serialVersionUID = -23235245213533L;</p>\n<pre><code><figure class=\"highlight\"><pre><span class=\"keyword\">private</span>  <span class=\"keyword\">byte</span>[] buffer;\n\n<span class=\"keyword\">private</span> String dateStr;\n\n<span class=\"keyword\">public</span> SendData() {\n    setBuffer(<span class=\"keyword\">null</span>);\n    setDateStr(<span class=\"keyword\">null</span>);\n}\n\n<span class=\"keyword\">public</span> <span class=\"keyword\">byte</span>[] getBuffer() {\n    <span class=\"keyword\">return</span> buffer;\n}\n\n<span class=\"keyword\">public</span> String getDateStr() {\n    <span class=\"keyword\">return</span> dateStr;\n}\n\n<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> setDateStr(String dateStr) {\n    <span class=\"keyword\">this</span>.dateStr = String.valueOf(<span class=\"keyword\">new</span> Date().getTime());\n}\n\n<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> setBuffer(<span class=\"keyword\">byte</span>[] buffer) {\n    System.<span class=\"keyword\">out</span>.print(<span class=\"string\">\"begin \\n\"</span>);\n    <span class=\"keyword\">byte</span> [ ] buffers = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">1024</span>*<span class=\"number\">1</span>];\n    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span> ;  i&lt; buffers.length ;i++)\n        buffers[i] = Byte.parseByte(<span class=\"string\">\"2\"</span>);\n    System.<span class=\"keyword\">out</span>.print(<span class=\"string\">\"end \\n\"</span>);\n    <span class=\"keyword\">this</span>.buffer = buffers;\n}\n</pre></figure></code></pre>\n<p>}</p>\n","excerpt":95,"source":"_posts/mq5.md","slug":"mq5","ctime":"2013-08-23T02:27:45.000Z","mtime":"2013-08-23T02:35:49.000Z"},"_primary":15},"pages":{"1":{"title":"New Page","date":"2013-08-04T10:24:33.000Z","updated":"2013-08-07T09:16:46.000Z","comments":true,"layout":"page","content":"<p>title: New Page</p>\n<h2>date: 2013-08-04 18:24:33</h2>\n","excerpt":0,"source":"new-page/index.md","path":"new-page/index.html","ctime":"2013-08-07T09:16:46.000Z","mtime":"2013-08-07T09:16:46.000Z"},"_primary":2},"categories":{"1":{"name":"ios","slug":"ios","posts":[1,6]},"2":{"name":"hexo","slug":"hexo","posts":[2,7,13]},"3":{"name":"hibernate","slug":"hibernate","posts":[3,4]},"4":{"name":"情感","slug":"情感","posts":[8]},"5":{"name":"MQ","slug":"MQ","posts":[9,10,12,13,14]},"_primary":6},"tags":{"1":{"name":"技术","slug":"技术","posts":[1,2,3,4,6,7,9,10,12,13,14]},"2":{"name":"情感","slug":"情感","posts":[8,11]},"_primary":3},"assets":{"1":{"source":"source/favicon.ico","mtime":"2013-08-06T06:56:08.000Z"},"2":{"source":"themes/bootstrap/source/css/bootstrap-responsive.css","mtime":"2013-05-17T02:21:08.000Z"},"3":{"source":"themes/bootstrap/source/css/bootstrap-responsive.min.css","mtime":"2013-05-17T02:21:08.000Z"},"4":{"source":"themes/bootstrap/source/css/bootstrap.css","mtime":"2013-05-17T02:21:08.000Z"},"5":{"source":"themes/bootstrap/source/css/bootstrap.min.css","mtime":"2013-08-06T02:35:21.000Z"},"6":{"source":"themes/bootstrap/source/css/hexobootstrapcss.css","mtime":"2013-08-05T06:53:44.000Z"},"7":{"source":"themes/bootstrap/source/css/hf.css","mtime":"2013-08-22T02:16:26.000Z"},"8":{"source":"themes/bootstrap/source/css/tab.css","mtime":"2013-08-07T01:59:15.000Z"},"9":{"source":"themes/bootstrap/source/fancybox/blank.gif","mtime":"2013-08-02T06:45:57.000Z"},"10":{"source":"themes/bootstrap/source/fancybox/fancybox_loading.gif","mtime":"2013-08-02T06:45:57.000Z"},"11":{"source":"themes/bootstrap/source/fancybox/fancybox_overlay.png","mtime":"2013-08-02T06:45:57.000Z"},"12":{"source":"themes/bootstrap/source/fancybox/fancybox_sprite.png","mtime":"2013-08-02T06:45:57.000Z"},"13":{"source":"themes/bootstrap/source/fancybox/jquery.fancybox.css","mtime":"2013-08-02T06:45:57.000Z"},"14":{"source":"themes/bootstrap/source/fancybox/jquery.fancybox.pack.js","mtime":"2013-08-02T06:45:57.000Z"},"15":{"source":"themes/bootstrap/source/js/bootstrap.js","mtime":"2013-05-17T02:21:08.000Z"},"16":{"source":"themes/bootstrap/source/js/bootstrap.min.js","mtime":"2013-05-17T02:21:08.000Z"},"17":{"source":"themes/bootstrap/source/js/jquery-1.8.3.min.js","mtime":"2013-08-02T07:47:42.000Z"},"18":{"source":"themes/bootstrap/source/js/jquery.easing.min.js","mtime":"2013-07-27T08:21:16.000Z"},"19":{"source":"themes/bootstrap/source/js/jquery.imagesloaded.min.js","mtime":"2013-08-02T06:45:57.000Z"},"20":{"source":"themes/bootstrap/source/js/jquery.js","mtime":"2013-08-02T08:14:57.000Z"},"21":{"source":"themes/bootstrap/source/js/jquery.menuindex.js","mtime":"2013-08-21T15:02:37.000Z"},"22":{"source":"themes/bootstrap/source/js/jquery.pagination.js","mtime":"2013-08-02T08:14:57.000Z"},"23":{"source":"themes/bootstrap/source/js/jquery.scrollUp.js","mtime":"2013-07-27T08:21:16.000Z"},"24":{"source":"themes/bootstrap/source/js/jquery.scrollUp.min.js","mtime":"2013-07-27T08:21:16.000Z"},"25":{"source":"themes/bootstrap/source/img/glyphicons-halflings-white.png","mtime":"2013-08-02T08:14:57.000Z"},"26":{"source":"themes/bootstrap/source/img/glyphicons-halflings.png","mtime":"2013-08-02T08:14:57.000Z"},"27":{"source":"themes/bootstrap/source/img/hufeng825.jpg","mtime":"2013-08-05T03:47:58.000Z"},"28":{"source":"themes/bootstrap/source/img/patterns/mooning.png","mtime":"2013-08-06T02:18:38.000Z"},"_primary":29}}